{
  "!name": "webextensions",
  "!define": {
    "events.Rule": {
      "!doc": "Description of a declarative rule for handling events.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/Rule",
      "id": {
        "!doc": "Optional identifier that allows referencing this rule.",
        "!type": "string"
      },
      "tags": {
        "!doc": "Tags can be used to annotate rules and perform operations on sets of rules.",
        "!type": "[string]"
      },
      "conditions": {
        "!doc": "List of conditions that can trigger the actions.",
        "!type": "[?]"
      },
      "actions": {
        "!doc": "List of actions that are triggered if one of the condtions is fulfilled.",
        "!type": "[?]"
      },
      "priority": {
        "!doc": "Optional priority of this rule. Defaults to 100.",
        "!type": "number"
      }
    },
    "events.Event": {
      "!doc": "An object which allows the addition and removal of listeners for a Chrome event.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/Event",
      "addListener": {
        "!doc": "Registers an event listener <em>callback</em> to an event.",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/addListener"
      },
      "removeListener": {
        "!doc": "Deregisters an event listener <em>callback</em> from an event.",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/removeListener"
      },
      "hasListener": {
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/Event/hasListener"
      },
      "hasListeners": {
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/hasListeners"
      },
      "addRules": {
        "!doc": "Registers rules to handle events.",
        "!type": "fn(eventName: string, webViewInstanceId: number, rules: [+events.Rule], callback: fn(rules: [+events.Rule]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/addRules"
      },
      "getRules": {
        "!doc": "Returns currently registered rules.",
        "!type": "fn(eventName: string, webViewInstanceId: number, ruleIdentifiers: [string], callback: fn(rules: [+events.Rule]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/getRules"
      },
      "removeRules": {
        "!doc": "Unregisters currently registered rules.",
        "!type": "fn(eventName: string, webViewInstanceId: number, ruleIdentifiers: [string], callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/removeRules"
      }
    },
    "events.UrlFilter": {
      "!doc": "Filters URLs for various criteria. See <a href='events#filtered'>event filtering</a>. All criteria are case sensitive.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/events/UrlFilter",
      "hostContains": {
        "!doc": "Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name.",
        "!type": "string"
      },
      "hostEquals": {
        "!doc": "Matches if the host name of the URL is equal to a specified string.",
        "!type": "string"
      },
      "hostPrefix": {
        "!doc": "Matches if the host name of the URL starts with a specified string.",
        "!type": "string"
      },
      "hostSuffix": {
        "!doc": "Matches if the host name of the URL ends with a specified string.",
        "!type": "string"
      },
      "pathContains": {
        "!doc": "Matches if the path segment of the URL contains a specified string.",
        "!type": "string"
      },
      "pathEquals": {
        "!doc": "Matches if the path segment of the URL is equal to a specified string.",
        "!type": "string"
      },
      "pathPrefix": {
        "!doc": "Matches if the path segment of the URL starts with a specified string.",
        "!type": "string"
      },
      "pathSuffix": {
        "!doc": "Matches if the path segment of the URL ends with a specified string.",
        "!type": "string"
      },
      "queryContains": {
        "!doc": "Matches if the query segment of the URL contains a specified string.",
        "!type": "string"
      },
      "queryEquals": {
        "!doc": "Matches if the query segment of the URL is equal to a specified string.",
        "!type": "string"
      },
      "queryPrefix": {
        "!doc": "Matches if the query segment of the URL starts with a specified string.",
        "!type": "string"
      },
      "querySuffix": {
        "!doc": "Matches if the query segment of the URL ends with a specified string.",
        "!type": "string"
      },
      "urlContains": {
        "!doc": "Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number.",
        "!type": "string"
      },
      "urlEquals": {
        "!doc": "Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number.",
        "!type": "string"
      },
      "urlMatches": {
        "!doc": "Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the <a href=\"https://github.com/google/re2/blob/master/doc/syntax.txt\">RE2 syntax</a>.",
        "!type": "string"
      },
      "originAndPathMatches": {
        "!doc": "Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the <a href=\"https://github.com/google/re2/blob/master/doc/syntax.txt\">RE2 syntax</a>.",
        "!type": "string"
      },
      "urlPrefix": {
        "!doc": "Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number.",
        "!type": "string"
      },
      "urlSuffix": {
        "!doc": "Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number.",
        "!type": "string"
      },
      "schemes": {
        "!doc": "Matches if the scheme of the URL is equal to any of the schemes specified in the array.",
        "!type": "[string]"
      },
      "ports": {
        "!doc": "Matches if the port of the URL is contained in any of the specified port lists. For example <code>[80, 443, [1000, 1200]]</code> matches all requests on port 80, 443 and in the range 1000-1200.",
        "!type": "[number]?, [[number]]?"
      }
    },
    "types.SettingScope": {
      "!doc": "The scope of the Setting. One of<ul><li><var>regular</var>: setting for the regular profile (which is inherited by the incognito profile if not overridden elsewhere),</li><li><var>regular_only</var>: setting for the regular profile only (not inherited by the incognito profile),</li><li><var>incognito_persistent</var>: setting for the incognito profile that survives browser restarts (overrides regular preferences),</li><li><var>incognito_session_only</var>: setting for the incognito profile that can only be set during an incognito session and is deleted when the incognito session ends (overrides regular and incognito_persistent preferences).</li></ul> Only <var>regular</var> is supported by Firefox at this time."
    },
    "types.LevelOfControl": {
      "!doc": "One of<ul><li><var>not_controllable</var>: cannot be controlled by any extension</li><li><var>controlled_by_other_extensions</var>: controlled by extensions with higher precedence</li><li><var>controllable_by_this_extension</var>: can be controlled by this extension</li><li><var>controlled_by_this_extension</var>: controlled by this extension</li></ul>"
    },
    "types.Setting": {
      "get": {
        "!doc": "Gets the value of a setting.",
        "!type": "fn(details: object, callback: fn(details: object))"
      },
      "set": {
        "!doc": "Sets the value of a setting.",
        "!type": "fn(details: object, callback: fn())"
      },
      "clear": {
        "!doc": "Clears the setting, restoring any default value.",
        "!type": "fn(details: object, callback: fn())"
      }
    },
    "extensionTypes.ImageFormat": {
      "!doc": "The format of an image.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extensionTypes/ImageFormat"
    },
    "extensionTypes.ImageDetails": {
      "!doc": "Details about the format and quality of an image.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extensionTypes/ImageDetails",
      "format": {
        "!doc": "The format of the resulting image.  Default is <code>\"jpeg\"</code>.",
        "!type": "+extensionTypes.ImageFormat"
      },
      "quality": {
        "!doc": "When format is <code>\"jpeg\"</code>, controls the quality of the resulting image.  This value is ignored for PNG images.  As quality is decreased, the resulting image will have more visual artifacts, and the number of bytes needed to store it will decrease.",
        "!type": "number"
      }
    },
    "extensionTypes.RunAt": {
      "!doc": "The soonest that the JavaScript or CSS will be injected into the tab.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extensionTypes/RunAt"
    },
    "extensionTypes.CSSOrigin": {
      "!doc": "The origin of the CSS to inject, this affects the cascading order (priority) of the stylesheet."
    },
    "extensionTypes.InjectDetails": {
      "!doc": "Details of the script or CSS to inject. Either the code or the file property must be set, but both may not be set at the same time.",
      "code": {
        "!doc": "JavaScript or CSS code to inject.<br><br><b>Warning:</b><br>Be careful using the <code>code</code> parameter. Incorrect use of it may open your extension to <a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">cross site scripting</a> attacks.",
        "!type": "string"
      },
      "file": {
        "!doc": "JavaScript or CSS file to inject.",
        "!type": "string"
      },
      "allFrames": {
        "!doc": "If allFrames is <code>true</code>, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame.",
        "!type": "bool"
      },
      "matchAboutBlank": {
        "!doc": "If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is <code>false</code>.",
        "!type": "bool"
      },
      "frameId": {
        "!doc": "The ID of the frame to inject the script into. This may not be used in combination with <code>allFrames</code>.",
        "!type": "number"
      },
      "runAt": {
        "!doc": "The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\".",
        "!type": "+extensionTypes.RunAt"
      },
      "cssOrigin": {
        "!doc": "The css origin of the stylesheet to inject. Defaults to \"author\".",
        "!type": "+extensionTypes.CSSOrigin"
      }
    },
    "extensionTypes.PlainJSONValue": {
      "!doc": "A plain JSON value"
    },
    "alarms.Alarm": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/alarms/Alarm",
      "name": {
        "!doc": "Name of this alarm.",
        "!type": "string"
      },
      "scheduledTime": {
        "!doc": "Time when the alarm is scheduled to fire, in milliseconds past the epoch.",
        "!type": "number"
      },
      "periodInMinutes": {
        "!doc": "When present, signals that the alarm triggers periodically after so many minutes.",
        "!type": "number"
      }
    },
    "browserSettings.ImageAnimationBehavior": {
      "!doc": "How images should be animated in the browser."
    },
    "browserSettings.ContextMenuMouseEvent": {
      "!doc": "After which mouse event context menus should popup."
    },
    "contentScripts.RegisteredContentScriptOptions": {
      "!doc": "Details of a content script registered programmatically",
      "matches": {
        "!type": "[+manifest.MatchPattern]"
      },
      "excludeMatches": {
        "!type": "[+manifest.MatchPattern]"
      },
      "includeGlobs": {
        "!type": "[string]"
      },
      "excludeGlobs": {
        "!type": "[string]"
      },
      "css": {
        "!doc": "The list of CSS files to inject",
        "!type": "[+extensionTypes.ExtensionFileOrCode]"
      },
      "js": {
        "!doc": "The list of JS files to inject",
        "!type": "[+extensionTypes.ExtensionFileOrCode]"
      },
      "allFrames": {
        "!doc": "If allFrames is <code>true</code>, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame.",
        "!type": "bool"
      },
      "matchAboutBlank": {
        "!doc": "If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is <code>false</code>.",
        "!type": "bool"
      },
      "runAt": {
        "!doc": "The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\".",
        "!type": "+extensionTypes.RunAt"
      }
    },
    "contentScripts.RegisteredContentScript": {
      "!doc": "An object that represents a content script registered programmatically",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts/RegisteredContentScript",
      "unregister": {
        "!doc": "Unregister a content script registered programmatically",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts/RegisteredContentScript/unregister"
      }
    },
    "contextualIdentities.ContextualIdentity": {
      "!doc": "Represents information about a contextual identity.",
      "name": {
        "!doc": "The name of the contextual identity.",
        "!type": "string"
      },
      "icon": {
        "!doc": "The icon name of the contextual identity.",
        "!type": "string"
      },
      "iconUrl": {
        "!doc": "The icon url of the contextual identity.",
        "!type": "string"
      },
      "color": {
        "!doc": "The color name of the contextual identity.",
        "!type": "string"
      },
      "colorCode": {
        "!doc": "The color hash of the contextual identity.",
        "!type": "string"
      },
      "cookieStoreId": {
        "!doc": "The cookie store ID of the contextual identity.",
        "!type": "string"
      }
    },
    "cookies.SameSiteStatus": {
      "!doc": "A cookie's 'SameSite' state (https://tools.ietf.org/html/draft-west-first-party-cookies). 'no_restriction' corresponds to a cookie set without a 'SameSite' attribute, 'lax' to 'SameSite=Lax', and 'strict' to 'SameSite=Strict'."
    },
    "cookies.Cookie": {
      "!doc": "Represents information about an HTTP cookie.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/Cookie",
      "name": {
        "!doc": "The name of the cookie.",
        "!type": "string"
      },
      "value": {
        "!doc": "The value of the cookie.",
        "!type": "string"
      },
      "domain": {
        "!doc": "The domain of the cookie (e.g. \"www.google.com\", \"example.com\").",
        "!type": "string"
      },
      "hostOnly": {
        "!doc": "True if the cookie is a host-only cookie (i.e. a request's host must exactly match the domain of the cookie).",
        "!type": "bool"
      },
      "path": {
        "!doc": "The path of the cookie.",
        "!type": "string"
      },
      "secure": {
        "!doc": "True if the cookie is marked as Secure (i.e. its scope is limited to secure channels, typically HTTPS).",
        "!type": "bool"
      },
      "httpOnly": {
        "!doc": "True if the cookie is marked as HttpOnly (i.e. the cookie is inaccessible to client-side scripts).",
        "!type": "bool"
      },
      "sameSite": {
        "!doc": "The cookie's same-site status (i.e. whether the cookie is sent with cross-site requests).",
        "!type": "+cookies.SameSiteStatus",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/set"
      },
      "session": {
        "!doc": "True if the cookie is a session cookie, as opposed to a persistent cookie with an expiration date.",
        "!type": "bool"
      },
      "expirationDate": {
        "!doc": "The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session cookies.",
        "!type": "number"
      },
      "storeId": {
        "!doc": "The ID of the cookie store containing this cookie, as provided in getAllCookieStores().",
        "!type": "string"
      },
      "firstPartyDomain": {
        "!doc": "The first-party domain of the cookie.",
        "!type": "string"
      }
    },
    "cookies.CookieStore": {
      "!doc": "Represents a cookie store in the browser. An incognito mode window, for instance, uses a separate cookie store from a non-incognito window.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/CookieStore",
      "id": {
        "!doc": "The unique identifier for the cookie store.",
        "!type": "string"
      },
      "tabIds": {
        "!doc": "Identifiers of all the browser tabs that share this cookie store.",
        "!type": "[number]"
      },
      "incognito": {
        "!doc": "Indicates if this is an incognito cookie store",
        "!type": "bool"
      }
    },
    "cookies.OnChangedCause": {
      "!doc": "The underlying reason behind the cookie's change. If a cookie was inserted, or removed via an explicit call to $(ref:cookies.remove), \"cause\" will be \"explicit\". If a cookie was automatically removed due to expiry, \"cause\" will be \"expired\". If a cookie was removed due to being overwritten with an already-expired expiration date, \"cause\" will be set to \"expired_overwrite\".  If a cookie was automatically removed due to garbage collection, \"cause\" will be \"evicted\".  If a cookie was automatically removed due to a \"set\" call that overwrote it, \"cause\" will be \"overwrite\". Plan your response accordingly.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/OnChangedCause"
    },
    "dns.DNSRecord": {
      "!doc": "An object encapsulating a DNS Record.",
      "canonicalName": {
        "!doc": "The canonical hostname for this record.  this value is empty if the record was not fetched with the 'canonical_name' flag.",
        "!type": "string"
      },
      "isTRR": {
        "!doc": "Record retreived with TRR.",
        "!type": "string"
      },
      "addresses": {
        "!type": "[string]"
      }
    },
    "downloads.FilenameConflictAction": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/FilenameConflictAction"
    },
    "downloads.InterruptReason": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/InterruptReason"
    },
    "downloads.DangerType": {
      "!doc": "<dl><dt>file</dt><dd>The download's filename is suspicious.</dd><dt>url</dt><dd>The download's URL is known to be malicious.</dd><dt>content</dt><dd>The downloaded file is known to be malicious.</dd><dt>uncommon</dt><dd>The download's URL is not commonly downloaded and could be dangerous.</dd><dt>safe</dt><dd>The download presents no known danger to the user's computer.</dd></dl>These string constants will never change, however the set of DangerTypes may change.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/DangerType"
    },
    "downloads.State": {
      "!doc": "<dl><dt>in_progress</dt><dd>The download is currently receiving data from the server.</dd><dt>interrupted</dt><dd>An error broke the connection with the file host.</dd><dt>complete</dt><dd>The download completed successfully.</dd></dl>These string constants will never change, however the set of States may change.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/State"
    },
    "downloads.DownloadItem": {
      "id": {
        "!doc": "An identifier that is persistent across browser sessions.",
        "!type": "number"
      },
      "url": {
        "!doc": "Absolute URL.",
        "!type": "string"
      },
      "referrer": {
        "!type": "string"
      },
      "filename": {
        "!doc": "Absolute local path.",
        "!type": "string"
      },
      "incognito": {
        "!doc": "False if this download is recorded in the history, true if it is not recorded.",
        "!type": "bool"
      },
      "danger": {
        "!doc": "Indication of whether this download is thought to be safe or known to be suspicious.",
        "!type": "+downloads.DangerType"
      },
      "mime": {
        "!doc": "The file's MIME type.",
        "!type": "string"
      },
      "startTime": {
        "!doc": "Number of milliseconds between the unix epoch and when this download began.",
        "!type": "string"
      },
      "endTime": {
        "!doc": "Number of milliseconds between the unix epoch and when this download ended.",
        "!type": "string"
      },
      "estimatedEndTime": {
        "!type": "string"
      },
      "state": {
        "!doc": "Indicates whether the download is progressing, interrupted, or complete.",
        "!type": "+downloads.State"
      },
      "paused": {
        "!doc": "True if the download has stopped reading data from the host, but kept the connection open.",
        "!type": "bool"
      },
      "canResume": {
        "!type": "bool"
      },
      "error": {
        "!doc": "Number indicating why a download was interrupted.",
        "!type": "+downloads.InterruptReason"
      },
      "bytesReceived": {
        "!doc": "Number of bytes received so far from the host, without considering file compression.",
        "!type": "number"
      },
      "totalBytes": {
        "!doc": "Number of bytes in the whole file, without considering file compression, or -1 if unknown.",
        "!type": "number"
      },
      "fileSize": {
        "!doc": "Number of bytes in the whole file post-decompression, or -1 if unknown.",
        "!type": "number"
      },
      "exists": {
        "!type": "bool"
      },
      "byExtensionId": {
        "!type": "string"
      },
      "byExtensionName": {
        "!type": "string"
      }
    },
    "downloads.StringDelta": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/StringDelta",
      "current": {
        "!type": "string"
      },
      "previous": {
        "!type": "string"
      }
    },
    "downloads.DoubleDelta": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/DoubleDelta",
      "current": {
        "!type": "number"
      },
      "previous": {
        "!type": "number"
      }
    },
    "downloads.BooleanDelta": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/BooleanDelta",
      "current": {
        "!type": "bool"
      },
      "previous": {
        "!type": "bool"
      }
    },
    "downloads.DownloadTime": {
      "!doc": "A time specified as a Date object, a number or string representing milliseconds since the epoch, or an ISO 8601 string",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/DownloadTime"
    },
    "downloads.DownloadQuery": {
      "!doc": "Parameters that combine to specify a predicate that can be used to select a set of downloads.  Used for example in search() and erase()",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/DownloadQuery",
      "query": {
        "!doc": "This array of search terms limits results to <a href='#type-DownloadItem'>DownloadItems</a> whose <code>filename</code> or <code>url</code> contain all of the search terms that do not begin with a dash '-' and none of the search terms that do begin with a dash.",
        "!type": "[string]"
      },
      "startedBefore": {
        "!doc": "Limits results to downloads that started before the given ms since the epoch.",
        "!type": "+downloads.DownloadTime"
      },
      "startedAfter": {
        "!doc": "Limits results to downloads that started after the given ms since the epoch.",
        "!type": "+downloads.DownloadTime"
      },
      "endedBefore": {
        "!doc": "Limits results to downloads that ended before the given ms since the epoch.",
        "!type": "+downloads.DownloadTime"
      },
      "endedAfter": {
        "!doc": "Limits results to downloads that ended after the given ms since the epoch.",
        "!type": "+downloads.DownloadTime"
      },
      "totalBytesGreater": {
        "!doc": "Limits results to downloads whose totalBytes is greater than the given integer.",
        "!type": "number"
      },
      "totalBytesLess": {
        "!doc": "Limits results to downloads whose totalBytes is less than the given integer.",
        "!type": "number"
      },
      "filenameRegex": {
        "!doc": "Limits results to <a href='#type-DownloadItem'>DownloadItems</a> whose <code>filename</code> matches the given regular expression.",
        "!type": "string"
      },
      "urlRegex": {
        "!doc": "Limits results to <a href='#type-DownloadItem'>DownloadItems</a> whose <code>url</code> matches the given regular expression.",
        "!type": "string"
      },
      "limit": {
        "!doc": "Setting this integer limits the number of results. Otherwise, all matching <a href='#type-DownloadItem'>DownloadItems</a> will be returned.",
        "!type": "number"
      },
      "orderBy": {
        "!doc": "Setting elements of this array to <a href='#type-DownloadItem'>DownloadItem</a> properties in order to sort the search results. For example, setting <code>orderBy='startTime'</code> sorts the <a href='#type-DownloadItem'>DownloadItems</a> by their start time in ascending order. To specify descending order, prefix <code>orderBy</code> with a hyphen: '-startTime'.",
        "!type": "[string]"
      },
      "id": {
        "!type": "number"
      },
      "url": {
        "!doc": "Absolute URL.",
        "!type": "string"
      },
      "filename": {
        "!doc": "Absolute local path.",
        "!type": "string"
      },
      "danger": {
        "!doc": "Indication of whether this download is thought to be safe or known to be suspicious.",
        "!type": "+downloads.DangerType"
      },
      "mime": {
        "!doc": "The file's MIME type.",
        "!type": "string"
      },
      "startTime": {
        "!type": "string"
      },
      "endTime": {
        "!type": "string"
      },
      "state": {
        "!doc": "Indicates whether the download is progressing, interrupted, or complete.",
        "!type": "+downloads.State"
      },
      "paused": {
        "!doc": "True if the download has stopped reading data from the host, but kept the connection open.",
        "!type": "bool"
      },
      "error": {
        "!doc": "Why a download was interrupted.",
        "!type": "+downloads.InterruptReason"
      },
      "bytesReceived": {
        "!doc": "Number of bytes received so far from the host, without considering file compression.",
        "!type": "number"
      },
      "totalBytes": {
        "!doc": "Number of bytes in the whole file, without considering file compression, or -1 if unknown.",
        "!type": "number"
      },
      "fileSize": {
        "!doc": "Number of bytes in the whole file post-decompression, or -1 if unknown.",
        "!type": "number"
      },
      "exists": {
        "!type": "bool"
      }
    },
    "extension.ViewType": {
      "!doc": "The type of extension view.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/ViewType"
    },
    "i18n.LanguageCode": {
      "!doc": "An ISO language code such as <code>en</code> or <code>fr</code>. For a complete list of languages supported by this method, see <a href='http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc'>kLanguageInfoTable</a>. For an unknown language, <code>und</code> will be returned, which means that [percentage] of the text is unknown to CLD",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/i18n/LanguageCode"
    },
    "idle.IdleState": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/idle/IdleState"
    },
    "management.IconInfo": {
      "!doc": "Information about an icon belonging to an extension.",
      "size": {
        "!doc": "A number representing the width and height of the icon. Likely values include (but are not limited to) 128, 48, 24, and 16.",
        "!type": "number"
      },
      "url": {
        "!doc": "The URL for this icon image. To display a grayscale version of the icon (to indicate that an extension is disabled, for example), append <code>?grayscale=true</code> to the URL.",
        "!type": "string"
      }
    },
    "management.ExtensionDisabledReason": {
      "!doc": "A reason the item is disabled."
    },
    "management.ExtensionType": {
      "!doc": "The type of this extension, 'extension' or 'theme'."
    },
    "management.ExtensionInstallType": {
      "!doc": "How the extension was installed. One of<br><var>development</var>: The extension was loaded unpacked in developer mode,<br><var>normal</var>: The extension was installed normally via an .xpi file,<br><var>sideload</var>: The extension was installed by other software on the machine,<br><var>other</var>: The extension was installed by other means."
    },
    "management.ExtensionInfo": {
      "!doc": "Information about an installed extension.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/ExtensionInfo",
      "id": {
        "!doc": "The extension's unique identifier.",
        "!type": "string"
      },
      "name": {
        "!doc": "The name of this extension.",
        "!type": "string"
      },
      "shortName": {
        "!doc": "A short version of the name of this extension.",
        "!type": "string"
      },
      "description": {
        "!doc": "The description of this extension.",
        "!type": "string"
      },
      "version": {
        "!doc": "The <a href='manifest/version'>version</a> of this extension.",
        "!type": "string"
      },
      "versionName": {
        "!doc": "The <a href='manifest/version#version_name'>version name</a> of this extension if the manifest specified one.",
        "!type": "string"
      },
      "mayDisable": {
        "!doc": "Whether this extension can be disabled or uninstalled by the user.",
        "!type": "bool"
      },
      "enabled": {
        "!doc": "Whether it is currently enabled or disabled.",
        "!type": "bool"
      },
      "disabledReason": {
        "!doc": "A reason the item is disabled.",
        "!type": "+management.ExtensionDisabledReason"
      },
      "type": {
        "!doc": "The type of this extension, 'extension' or 'theme'.",
        "!type": "+management.ExtensionType"
      },
      "homepageUrl": {
        "!doc": "The URL of the homepage of this extension.",
        "!type": "string"
      },
      "updateUrl": {
        "!doc": "The update URL of this extension.",
        "!type": "string"
      },
      "optionsUrl": {
        "!doc": "The url for the item's options page, if it has one.",
        "!type": "string"
      },
      "icons": {
        "!doc": "A list of icon information. Note that this just reflects what was declared in the manifest, and the actual image at that url may be larger or smaller than what was declared, so you might consider using explicit width and height attributes on img tags referencing these images. See the <a href='manifest/icons'>manifest documentation on icons</a> for more details.",
        "!type": "[+management.IconInfo]"
      },
      "permissions": {
        "!doc": "Returns a list of API based permissions.",
        "!type": "[string]"
      },
      "hostPermissions": {
        "!doc": "Returns a list of host based permissions.",
        "!type": "[string]"
      },
      "installType": {
        "!doc": "How the extension was installed.",
        "!type": "+management.ExtensionInstallType"
      }
    },
    "networkStatus.NetworkLinkInfo": {
      "status": {
        "!doc": "Status of the network link, if \"unknown\" then link is usually assumed to be \"up\"",
        "!type": "string"
      },
      "type": {
        "!doc": "If known, the type of network connection that is avialable.",
        "!type": "string"
      },
      "id": {
        "!doc": "If known, the network id or name.",
        "!type": "string"
      }
    },
    "notifications.TemplateType": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/TemplateType"
    },
    "notifications.NotificationItem": {
      "title": {
        "!doc": "Title of one item of a list notification.",
        "!type": "string"
      },
      "message": {
        "!doc": "Additional details about this item.",
        "!type": "string"
      }
    },
    "notifications.CreateNotificationOptions": {
      "type": {
        "!doc": "Which type of notification to display.",
        "!type": "+notifications.TemplateType"
      },
      "iconUrl": {
        "!doc": "A URL to the sender's avatar, app icon, or a thumbnail for image notifications.",
        "!type": "string"
      },
      "appIconMaskUrl": {
        "!doc": "A URL to the app icon mask.",
        "!type": "string"
      },
      "title": {
        "!doc": "Title of the notification (e.g. sender name for email).",
        "!type": "string"
      },
      "message": {
        "!doc": "Main notification content.",
        "!type": "string"
      },
      "contextMessage": {
        "!doc": "Alternate notification content with a lower-weight font.",
        "!type": "string"
      },
      "priority": {
        "!doc": "Priority ranges from -2 to 2. -2 is lowest priority. 2 is highest. Zero is default.",
        "!type": "number"
      },
      "eventTime": {
        "!doc": "A timestamp associated with the notification, in milliseconds past the epoch.",
        "!type": "number"
      },
      "buttons": {
        "!doc": "Text and icons for up to two notification action buttons.",
        "!type": "[object]"
      },
      "imageUrl": {
        "!doc": "A URL to the image thumbnail for image-type notifications.",
        "!type": "string"
      },
      "items": {
        "!doc": "Items for multi-item notifications.",
        "!type": "[+notifications.NotificationItem]"
      },
      "progress": {
        "!doc": "Current progress ranges from 0 to 100.",
        "!type": "number"
      },
      "isClickable": {
        "!doc": "Whether to show UI indicating that the app will visibly respond to clicks on the body of a notification.",
        "!type": "bool"
      }
    },
    "notifications.UpdateNotificationOptions": {
      "type": {
        "!doc": "Which type of notification to display.",
        "!type": "+notifications.TemplateType"
      },
      "iconUrl": {
        "!doc": "A URL to the sender's avatar, app icon, or a thumbnail for image notifications.",
        "!type": "string"
      },
      "appIconMaskUrl": {
        "!doc": "A URL to the app icon mask.",
        "!type": "string"
      },
      "title": {
        "!doc": "Title of the notification (e.g. sender name for email).",
        "!type": "string"
      },
      "message": {
        "!doc": "Main notification content.",
        "!type": "string"
      },
      "contextMessage": {
        "!doc": "Alternate notification content with a lower-weight font.",
        "!type": "string"
      },
      "priority": {
        "!doc": "Priority ranges from -2 to 2. -2 is lowest priority. 2 is highest. Zero is default.",
        "!type": "number"
      },
      "eventTime": {
        "!doc": "A timestamp associated with the notification, in milliseconds past the epoch.",
        "!type": "number"
      },
      "buttons": {
        "!doc": "Text and icons for up to two notification action buttons.",
        "!type": "[object]"
      },
      "imageUrl": {
        "!doc": "A URL to the image thumbnail for image-type notifications.",
        "!type": "string"
      },
      "items": {
        "!doc": "Items for multi-item notifications.",
        "!type": "[+notifications.NotificationItem]"
      },
      "progress": {
        "!doc": "Current progress ranges from 0 to 100.",
        "!type": "number"
      },
      "isClickable": {
        "!doc": "Whether to show UI indicating that the app will visibly respond to clicks on the body of a notification.",
        "!type": "bool"
      }
    },
    "permissions.Permissions": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/permissions/Permissions",
      "permissions": {
        "!type": "[+manifest.OptionalPermission]"
      },
      "origins": {
        "!type": "[+manifest.MatchPattern]"
      }
    },
    "permissions.AnyPermissions": {
      "permissions": {
        "!type": "[+manifest.Permission]"
      },
      "origins": {
        "!type": "[+manifest.MatchPattern]"
      }
    },
    "privacy.network.IPHandlingPolicy": {
      "!doc": "The IP handling policy of WebRTC."
    },
    "privacy.websites.TrackingProtectionModeOption": {
      "!doc": "The mode for tracking protection."
    },
    "privacy.websites.CookieConfig": {
      "!doc": "The settings for cookies.",
      "behavior": {
        "!doc": "The type of cookies to allow.",
        "!type": "string"
      },
      "nonPersistentCookies": {
        "!doc": "Whether to create all cookies as nonPersistent (i.e., session) cookies.",
        "!type": "bool"
      }
    },
    "proxy.ProxyConfig": {
      "!doc": "An object which describes proxy settings.",
      "proxyType": {
        "!doc": "The type of proxy to use.",
        "!type": "string"
      },
      "http": {
        "!doc": "The address of the http proxy, can include a port.",
        "!type": "string"
      },
      "httpProxyAll": {
        "!doc": "Use the http proxy server for all protocols.",
        "!type": "bool"
      },
      "ftp": {
        "!doc": "The address of the ftp proxy, can include a port.",
        "!type": "string"
      },
      "ssl": {
        "!doc": "The address of the ssl proxy, can include a port.",
        "!type": "string"
      },
      "socks": {
        "!doc": "The address of the socks proxy, can include a port.",
        "!type": "string"
      },
      "socksVersion": {
        "!doc": "The version of the socks proxy.",
        "!type": "number"
      },
      "passthrough": {
        "!doc": "A list of hosts which should not be proxied.",
        "!type": "string"
      },
      "autoConfigUrl": {
        "!doc": "A URL to use to configure the proxy.",
        "!type": "string"
      },
      "autoLogin": {
        "!doc": "Do not prompt for authentication if password is saved.",
        "!type": "bool"
      },
      "proxyDNS": {
        "!doc": "Proxy DNS when using SOCKS v5.",
        "!type": "bool"
      }
    },
    "runtime.Port": {
      "!doc": "An object which allows two way communication with other pages.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/Port",
      "name": {
        "!type": "string"
      },
      "disconnect": {
        "!type": "fn()"
      },
      "onDisconnect": {
        "!type": "+events.Event"
      },
      "onMessage": {
        "!type": "+events.Event"
      },
      "postMessage": {
        "!type": "fn()"
      },
      "sender": {
        "!doc": "This property will <b>only</b> be present on ports passed to onConnect/onConnectExternal listeners.",
        "!type": "+runtime.MessageSender"
      }
    },
    "runtime.MessageSender": {
      "!doc": "An object containing information about the script context that sent a message or request.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/MessageSender",
      "tab": {
        "!doc": "The $(ref:tabs.Tab) which opened the connection, if any. This property will <strong>only</strong> be present when the connection was opened from a tab (including content scripts), and <strong>only</strong> if the receiver is an extension, not an app.",
        "!type": "+tabs.Tab"
      },
      "frameId": {
        "!doc": "The $(topic:frame_ids)[frame] that opened the connection. 0 for top-level frames, positive for child frames. This will only be set when <code>tab</code> is set.",
        "!type": "number"
      },
      "id": {
        "!doc": "The ID of the extension or app that opened the connection, if any.",
        "!type": "string"
      },
      "url": {
        "!doc": "The URL of the page or frame that opened the connection. If the sender is in an iframe, it will be iframe's URL not the URL of the page which hosts it.",
        "!type": "string"
      },
      "tlsChannelId": {
        "!doc": "The TLS channel ID of the page or frame that opened the connection, if requested by the extension or app, and if available.",
        "!type": "string"
      }
    },
    "runtime.PlatformOs": {
      "!doc": "The operating system the browser is running on.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/PlatformOs"
    },
    "runtime.PlatformArch": {
      "!doc": "The machine's processor architecture.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/PlatformArch"
    },
    "runtime.PlatformInfo": {
      "!doc": "An object containing information about the current platform.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/PlatformInfo",
      "os": {
        "!doc": "The operating system the browser is running on.",
        "!type": "+runtime.PlatformOs"
      },
      "arch": {
        "!doc": "The machine's processor architecture.",
        "!type": "+runtime.PlatformArch"
      },
      "nacl_arch": {
        "!doc": "The native client architecture. This may be different from arch on some platforms.",
        "!type": "+runtime.PlatformNaclArch"
      }
    },
    "runtime.BrowserInfo": {
      "!doc": "An object containing information about the current browser.",
      "name": {
        "!doc": "The name of the browser, for example 'Firefox'.",
        "!type": "string"
      },
      "vendor": {
        "!doc": "The name of the browser vendor, for example 'Mozilla'.",
        "!type": "string"
      },
      "version": {
        "!doc": "The browser's version, for example '42.0.0' or '0.8.1pre'.",
        "!type": "string"
      },
      "buildID": {
        "!doc": "The browser's build ID/date, for example '20160101'.",
        "!type": "string"
      }
    },
    "runtime.RequestUpdateCheckStatus": {
      "!doc": "Result of the update check.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/RequestUpdateCheckStatus"
    },
    "runtime.OnInstalledReason": {
      "!doc": "The reason that this event is being dispatched.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/OnInstalledReason"
    },
    "runtime.OnRestartRequiredReason": {
      "!doc": "The reason that the event is being dispatched. 'app_update' is used when the restart is needed because the application is updated to a newer version. 'os_update' is used when the restart is needed because the browser/OS is updated to a newer version. 'periodic' is used when the system runs for more than the permitted uptime set in the enterprise policy.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/OnRestartRequiredReason"
    },
    "storage.StorageChange": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageChange",
      "oldValue": {
        "!doc": "The old value of the item, if there was an old value.",
        "!type": "?"
      },
      "newValue": {
        "!doc": "The new value of the item, if there is a new value.",
        "!type": "?"
      }
    },
    "storage.StorageArea": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea",
      "get": {
        "!doc": "Gets one or more items from storage.",
        "!type": "fn(keys?: string, keys?: [string], keys?: object, callback: fn(items: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/get"
      },
      "getBytesInUse": {
        "!doc": "Gets the amount of space (in bytes) being used by one or more items.",
        "!type": "fn(keys?: string, keys?: [string], callback: fn(bytesInUse: number))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/getBytesInUse"
      },
      "set": {
        "!doc": "Sets multiple items.",
        "!type": "fn(items: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/set"
      },
      "remove": {
        "!doc": "Removes one or more items from storage.",
        "!type": "fn(keys?: string, keys?: [string], callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/remove"
      },
      "clear": {
        "!doc": "Removes all items from storage.",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageArea/clear"
      }
    },
    "telemetry.ScalarType": {
      "!doc": "Type of scalar: 'count' for numeric values, 'string' for string values, 'boolean' for boolean values. Maps to <code>nsITelemetry.SCALAR_TYPE_*</code>."
    },
    "telemetry.ScalarData": {
      "!doc": "Represents registration data for a Telemetry scalar.",
      "kind": {
        "!type": "+telemetry.ScalarType"
      },
      "keyed": {
        "!doc": "True if this is a keyed scalar.",
        "!type": "bool"
      },
      "record_on_release": {
        "!doc": "True if this data should be recorded on release.",
        "!type": "bool"
      },
      "expired": {
        "!doc": "True if this scalar entry is expired. This allows recording it without error, but it will be discarded.",
        "!type": "bool"
      }
    },
    "telemetry.EventData": {
      "!doc": "Represents registration data for a Telemetry event.",
      "methods": {
        "!doc": "List of methods for this event entry.",
        "!type": "[string]"
      },
      "objects": {
        "!doc": "List of objects for this event entry.",
        "!type": "[string]"
      },
      "extra_keys": {
        "!doc": "List of allowed extra keys for this event entry.",
        "!type": "[string]"
      },
      "record_on_release": {
        "!doc": "True if this data should be recorded on release.",
        "!type": "bool"
      },
      "expired": {
        "!doc": "True if this event entry is expired. This allows recording it without error, but it will be discarded.",
        "!type": "bool"
      }
    },
    "theme.ThemeUpdateInfo": {
      "!doc": "Info provided in the onUpdated listener.",
      "theme": {
        "!doc": "The new theme after update"
      },
      "windowId": {
        "!doc": "The id of the window the theme has been applied to",
        "!type": "number"
      }
    },
    "userScripts.UserScriptOptions": {
      "!doc": "Details of a user script",
      "js": {
        "!doc": "The list of JS files to inject",
        "!type": "[+extensionTypes.ExtensionFileOrCode]"
      },
      "scriptMetadata": {
        "!doc": "An opaque user script metadata value",
        "!type": "+extensionTypes.PlainJSONValue"
      },
      "matches": {
        "!type": "[+manifest.MatchPattern]"
      },
      "excludeMatches": {
        "!type": "[+manifest.MatchPattern]"
      },
      "includeGlobs": {
        "!type": "[string]"
      },
      "excludeGlobs": {
        "!type": "[string]"
      },
      "allFrames": {
        "!doc": "If allFrames is <code>true</code>, implies that the JavaScript should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame.",
        "!type": "bool"
      },
      "matchAboutBlank": {
        "!doc": "If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is <code>false</code>.",
        "!type": "bool"
      },
      "runAt": {
        "!doc": "The soonest that the JavaScript will be injected into the tab. Defaults to \"document_idle\".",
        "!type": "+extensionTypes.RunAt"
      }
    },
    "userScripts.RegisteredUserScript": {
      "!doc": "An object that represents a user script registered programmatically",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/userScripts/RegisteredUserScript",
      "unregister": {
        "!doc": "Unregister a user script registered programmatically",
        "!type": "fn()"
      }
    },
    "webNavigation.TransitionType": {
      "!doc": "Cause of the navigation. The same transition types as defined in the history API are used. These are the same transition types as defined in the $(topic:transition_types)[history API] except with <code>\"start_page\"</code> in place of <code>\"auto_toplevel\"</code> (for backwards compatibility).",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/TransitionType"
    },
    "webNavigation.TransitionQualifier": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/TransitionQualifier"
    },
    "webNavigation.EventUrlFilters": {
      "url": {
        "!type": "[+events.UrlFilter]"
      }
    },
    "webRequest.ResourceType": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/ResourceType"
    },
    "webRequest.RequestFilter": {
      "!doc": "An object describing filters to apply to webRequest events.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/RequestFilter",
      "urls": {
        "!doc": "A list of URLs or URL patterns. Requests that cannot match any of the URLs will be filtered out.",
        "!type": "[string]"
      },
      "types": {
        "!doc": "A list of request types. Requests that cannot match any of the types will be filtered out.",
        "!type": "[+webRequest.ResourceType]"
      },
      "tabId": {
        "!type": "number"
      },
      "windowId": {
        "!type": "number"
      },
      "incognito": {
        "!doc": "If provided, requests that do not match the incognito state will be filtered out.",
        "!type": "bool"
      }
    },
    "webRequest.HttpHeaders": {
      "!doc": "An array of HTTP headers. Each header is represented as a dictionary containing the keys <code>name</code> and either <code>value</code> or <code>binaryValue</code>.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/HttpHeaders"
    },
    "webRequest.BlockingResponse": {
      "!doc": "Returns value for event handlers that have the 'blocking' extraInfoSpec applied. Allows the event handler to modify network requests.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/BlockingResponse",
      "cancel": {
        "!doc": "If true, the request is cancelled. Used in onBeforeRequest, this prevents the request from being sent.",
        "!type": "bool"
      },
      "redirectUrl": {
        "!doc": "Only used as a response to the onBeforeRequest and onHeadersReceived events. If set, the original request is prevented from being sent/completed and is instead redirected to the given URL. Redirections to non-HTTP schemes such as data: are allowed. Redirects initiated by a redirect action use the original request method for the redirect, with one exception: If the redirect is initiated at the onHeadersReceived stage, then the redirect will be issued using the GET method.",
        "!type": "string"
      },
      "upgradeToSecure": {
        "!doc": "Only used as a response to the onBeforeRequest event. If set, the original request is prevented from being sent/completed and is instead upgraded to a secure request.  If any extension returns <code>redirectUrl</code> during onBeforeRequest, <code>upgradeToSecure</code> will have no affect.",
        "!type": "bool",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/BlockingResponse"
      },
      "requestHeaders": {
        "!doc": "Only used as a response to the onBeforeSendHeaders event. If set, the request is made with these request headers instead.",
        "!type": "+webRequest.HttpHeaders"
      },
      "responseHeaders": {
        "!doc": "Only used as a response to the onHeadersReceived event. If set, the server is assumed to have responded with these response headers instead. Only return <code>responseHeaders</code> if you really want to modify the headers in order to limit the number of conflicts (only one extension may modify <code>responseHeaders</code> for each request).",
        "!type": "+webRequest.HttpHeaders"
      },
      "authCredentials": {
        "!doc": "Only used as a response to the onAuthRequired event. If set, the request is made using the supplied credentials.",
        "username": {
          "!type": "string"
        },
        "password": {
          "!type": "string"
        }
      }
    },
    "webRequest.CertificateInfo": {
      "!doc": "Contains the certificate properties of the request if it is a secure request.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/CertificateInfo",
      "subject": {
        "!type": "string"
      },
      "issuer": {
        "!type": "string"
      },
      "validity": {
        "!doc": "Contains start and end timestamps.",
        "start": {
          "!type": "number"
        },
        "end": {
          "!type": "number"
        }
      },
      "fingerprint": {
        "sha1": {
          "!type": "string"
        },
        "sha256": {
          "!type": "string"
        }
      },
      "serialNumber": {
        "!type": "string"
      },
      "isBuiltInRoot": {
        "!type": "bool"
      },
      "subjectPublicKeyInfoDigest": {
        "sha256": {
          "!type": "string"
        }
      },
      "rawDER": {
        "!type": "[number]"
      }
    },
    "webRequest.SecurityInfo": {
      "!doc": "Contains the security properties of the request (ie. SSL/TLS information).",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/SecurityInfo",
      "state": {
        "!type": "string"
      },
      "errorMessage": {
        "!doc": "Error message if state is \"broken\"",
        "!type": "string"
      },
      "protocolVersion": {
        "!doc": "Protocol version if state is \"secure\"",
        "!type": "string"
      },
      "cipherSuite": {
        "!doc": "The cipher suite used in this request if state is \"secure\".",
        "!type": "string"
      },
      "keaGroupName": {
        "!doc": "The key exchange algorithm used in this request if state is \"secure\".",
        "!type": "string"
      },
      "signatureSchemeName": {
        "!doc": "The signature scheme used in this request if state is \"secure\".",
        "!type": "string"
      },
      "certificates": {
        "!doc": "Certificate data if state is \"secure\".  Will only contain one entry unless <code>certificateChain</code> is passed as an option.",
        "!type": "[+webRequest.CertificateInfo]"
      },
      "isDomainMismatch": {
        "!doc": "The domain name does not match the certificate domain.",
        "!type": "bool"
      },
      "isExtendedValidation": {
        "!type": "bool"
      },
      "isNotValidAtThisTime": {
        "!doc": "The certificate is either expired or is not yet valid.  See <code>CertificateInfo.validity</code> for start and end dates.",
        "!type": "bool"
      },
      "isUntrusted": {
        "!type": "bool"
      },
      "certificateTransparencyStatus": {
        "!doc": "Certificate transparency compliance per RFC 6962.  See <code>https://www.certificate-transparency.org/what-is-ct</code> for more information.",
        "!type": "+webRequest.CertificateTransparencyStatus"
      },
      "hsts": {
        "!doc": "True if host uses Strict Transport Security and state is \"secure\".",
        "!type": "bool"
      },
      "hpkp": {
        "!doc": "True if host uses Public Key Pinning and state is \"secure\".",
        "!type": "string"
      },
      "weaknessReasons": {
        "!doc": "list of reasons that cause the request to be considered weak, if state is \"weak\"",
        "!type": "[+webRequest.TransportWeaknessReasons]"
      }
    },
    "webRequest.UploadData": {
      "!doc": "Contains data uploaded in a URL request.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/UploadData",
      "bytes": {
        "!doc": "An ArrayBuffer with a copy of the data.",
        "!type": "?"
      },
      "file": {
        "!doc": "A string with the file's path and name.",
        "!type": "string"
      }
    },
    "webRequest.UrlClassificationFlags": {
      "!doc": "Tracking flags that match our internal tracking classification"
    },
    "webRequest.UrlClassificationParty": {
      "!doc": "If the request has been classified this is an array of $(ref:UrlClassificationFlags)."
    },
    "webRequest.UrlClassification": {
      "firstParty": {
        "!doc": "Classification flags if the request has been classified and it is first party.",
        "!type": "+webRequest.UrlClassificationParty"
      },
      "thirdParty": {
        "!doc": "Classification flags if the request has been classified and it or its window hierarchy is third party.",
        "!type": "+webRequest.UrlClassificationParty"
      }
    },
    "bookmarks.BookmarkTreeNodeUnmodifiable": {
      "!doc": "Indicates the reason why this node is unmodifiable. The <var>managed</var> value indicates that this node was configured by the system administrator or by the custodian of a supervised user. Omitted if the node can be modified by the user and the extension (default).",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/BookmarkTreeNodeUnmodifiable"
    },
    "bookmarks.BookmarkTreeNodeType": {
      "!doc": "Indicates the type of a BookmarkTreeNode, which can be one of bookmark, folder or separator.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/BookmarkTreeNodeType"
    },
    "bookmarks.BookmarkTreeNode": {
      "!doc": "A node (either a bookmark or a folder) in the bookmark tree.  Child nodes are ordered within their parent folder.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/BookmarkTreeNode",
      "id": {
        "!doc": "The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the browser is restarted.",
        "!type": "string"
      },
      "parentId": {
        "!doc": "The <code>id</code> of the parent folder.  Omitted for the root node.",
        "!type": "string"
      },
      "index": {
        "!doc": "The 0-based position of this node within its parent folder.",
        "!type": "number"
      },
      "url": {
        "!doc": "The URL navigated to when a user clicks the bookmark. Omitted for folders.",
        "!type": "string"
      },
      "title": {
        "!doc": "The text displayed for the node.",
        "!type": "string"
      },
      "dateAdded": {
        "!doc": "When this node was created, in milliseconds since the epoch (<code>new Date(dateAdded)</code>).",
        "!type": "number"
      },
      "dateGroupModified": {
        "!doc": "When the contents of this folder last changed, in milliseconds since the epoch.",
        "!type": "number"
      },
      "unmodifiable": {
        "!doc": "Indicates the reason why this node is unmodifiable. The <var>managed</var> value indicates that this node was configured by the system administrator or by the custodian of a supervised user. Omitted if the node can be modified by the user and the extension (default).",
        "!type": "+bookmarks.BookmarkTreeNodeUnmodifiable"
      },
      "type": {
        "!doc": "Indicates the type of the BookmarkTreeNode, which can be one of bookmark, folder or separator.",
        "!type": "+bookmarks.BookmarkTreeNodeType"
      },
      "children": {
        "!doc": "An ordered list of children of this node.",
        "!type": "[+bookmarks.BookmarkTreeNode]"
      }
    },
    "bookmarks.CreateDetails": {
      "!doc": "Object passed to the create() function.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/CreateDetails",
      "parentId": {
        "!doc": "Defaults to the Other Bookmarks folder.",
        "!type": "string"
      },
      "index": {
        "!type": "number"
      },
      "title": {
        "!type": "string"
      },
      "url": {
        "!type": "string"
      },
      "type": {
        "!doc": "Indicates the type of BookmarkTreeNode to create, which can be one of bookmark, folder or separator.",
        "!type": "+bookmarks.BookmarkTreeNodeType"
      }
    },
    "browserAction.Details": {
      "!doc": "Specifies to which tab or window the value should be set, or from which one it should be retrieved. If no tab nor window is specified, the global value is set or retrieved.",
      "tabId": {
        "!doc": "When setting a value, it will be specific to the specified tab, and will automatically reset when the tab navigates. When getting, specifies the tab to get the value from; if there is no tab-specific value, the window one will be inherited.",
        "!type": "number"
      },
      "windowId": {
        "!doc": "When setting a value, it will be specific to the specified window. When getting, specifies the window to get the value from; if there is no window-specific value, the global one will be inherited.",
        "!type": "number"
      }
    },
    "browserAction.ColorArray": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/ColorArray"
    },
    "browserAction.ImageDataType": {
      "!doc": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element).",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/ImageDataType"
    },
    "browserAction.ColorValue": {
      "!doc": "An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is <code>[255, 0, 0, 255]</code>. Can also be a string with a CSS value, with opaque red being <code>#FF0000</code> or <code>#F00</code>."
    },
    "browserAction.OnClickData": {
      "!doc": "Information sent when a browser action is clicked.",
      "modifiers": {
        "!doc": "An array of keyboard modifiers that were held while the menu item was clicked.",
        "!type": "[string]"
      },
      "button": {
        "!doc": "An integer value of button by which menu item was clicked.",
        "!type": "number"
      }
    },
    "browsingData.RemovalOptions": {
      "!doc": "Options that determine exactly what data will be removed.",
      "since": {
        "!doc": "Remove data accumulated on or after this date, represented in milliseconds since the epoch (accessible via the <code>getTime</code> method of the JavaScript <code>Date</code> object). If absent, defaults to 0 (which would remove all browsing data).",
        "!type": "+extensionTypes.Date"
      },
      "hostnames": {
        "!doc": "Only remove data associated with these hostnames (only applies to cookies and localStorage).",
        "!type": "[string]"
      },
      "originTypes": {
        "!doc": "An object whose properties specify which origin types ought to be cleared. If this object isn't specified, it defaults to clearing only \"unprotected\" origins. Please ensure that you <em>really</em> want to remove application data before adding 'protectedWeb' or 'extensions'.",
        "unprotectedWeb": {
          "!doc": "Normal websites.",
          "!type": "bool"
        },
        "protectedWeb": {
          "!doc": "Websites that have been installed as hosted applications (be careful!).",
          "!type": "bool"
        },
        "extension": {
          "!doc": "Extensions and packaged applications a user has installed (be _really_ careful!).",
          "!type": "bool"
        }
      }
    },
    "browsingData.DataTypeSet": {
      "!doc": "A set of data types. Missing data types are interpreted as <code>false</code>.",
      "cache": {
        "!doc": "The browser's cache. Note: when removing data, this clears the <em>entire</em> cache: it is not limited to the range you specify.",
        "!type": "bool"
      },
      "cookies": {
        "!doc": "The browser's cookies.",
        "!type": "bool"
      },
      "downloads": {
        "!doc": "The browser's download list.",
        "!type": "bool"
      },
      "formData": {
        "!doc": "The browser's stored form data.",
        "!type": "bool"
      },
      "history": {
        "!doc": "The browser's history.",
        "!type": "bool"
      },
      "indexedDB": {
        "!doc": "Websites' IndexedDB data.",
        "!type": "bool"
      },
      "localStorage": {
        "!doc": "Websites' local storage data.",
        "!type": "bool"
      },
      "serverBoundCertificates": {
        "!doc": "Server-bound certificates.",
        "!type": "bool"
      },
      "passwords": {
        "!doc": "Stored passwords.",
        "!type": "bool"
      },
      "pluginData": {
        "!doc": "Plugins' data.",
        "!type": "bool"
      },
      "serviceWorkers": {
        "!doc": "Service Workers.",
        "!type": "bool"
      }
    },
    "commands.Command": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/commands/Command",
      "name": {
        "!doc": "The name of the Extension Command",
        "!type": "string"
      },
      "description": {
        "!doc": "The Extension Command description",
        "!type": "string"
      },
      "shortcut": {
        "!doc": "The shortcut active for this command, or blank if not active.",
        "!type": "string"
      }
    },
    "devtools.inspectedWindow.Resource": {
      "!doc": "A resource within the inspected page, such as a document, a script, or an image.",
      "getContent": {
        "!doc": "Gets the content of the resource.",
        "!type": "fn(callback: fn(content: string, encoding: string))"
      },
      "setContent": {
        "!doc": "Sets the content of the resource.",
        "!type": "fn(content: string, commit: bool, callback: fn(error: object))"
      },
      "url": {
        "!doc": "The URL of the resource.",
        "!type": "string"
      }
    },
    "devtools.network.Request": {
      "!doc": "Represents a network request for a document resource (script, image and so on). See HAR Specification for reference.",
      "getContent": {
        "!doc": "Returns content of the response body.",
        "!type": "fn(callback: fn(content: string, encoding: string))"
      }
    },
    "devtools.panels.ElementsPanel": {
      "!doc": "Represents the Elements panel.",
      "createSidebarPane": {
        "!doc": "Creates a pane within panel's sidebar.",
        "!type": "fn(title: string, callback: fn(result: +devtools.panels.ExtensionSidebarPane))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.panels/ElementsPanel/createSidebarPane"
      }
    },
    "devtools.panels.SourcesPanel": {
      "!doc": "Represents the Sources panel.",
      "createSidebarPane": {
        "!doc": "Creates a pane within panel's sidebar.",
        "!type": "fn(title: string, callback: fn(result: +devtools.panels.ExtensionSidebarPane))"
      }
    },
    "devtools.panels.ExtensionPanel": {
      "!doc": "Represents a panel created by extension.",
      "createStatusBarButton": {
        "!doc": "Appends a button to the status bar of the panel.",
        "!type": "fn(iconPath: string, tooltipText: string, disabled: bool)"
      }
    },
    "devtools.panels.ExtensionSidebarPane": {
      "!doc": "A sidebar created by the extension.",
      "setHeight": {
        "!doc": "Sets the height of the sidebar.",
        "!type": "fn(height: string)"
      },
      "setExpression": {
        "!doc": "Sets an expression that is evaluated within the inspected page. The result is displayed in the sidebar pane.",
        "!type": "fn(expression: string, rootTitle: string, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.panels/ExtensionSidebarPane/setExpression"
      },
      "setObject": {
        "!doc": "Sets a JSON-compliant object to be displayed in the sidebar pane.",
        "!type": "fn(jsonObject: string, rootTitle: string, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.panels/ExtensionSidebarPane/setObject"
      },
      "setPage": {
        "!doc": "Sets an HTML page to be displayed in the sidebar pane.",
        "!type": "fn(path: +manifest.ExtensionURL)"
      }
    },
    "devtools.panels.Button": {
      "!doc": "A button created by the extension.",
      "update": {
        "!doc": "Updates the attributes of the button. If some of the arguments are omitted or <code>null</code>, the corresponding attributes are not updated.",
        "!type": "fn(iconPath: string, tooltipText: string, disabled: bool)"
      }
    },
    "history.TransitionType": {
      "!doc": "The $(topic:transition-types)[transition type] for this visit from its referrer.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/TransitionType"
    },
    "history.HistoryItem": {
      "!doc": "An object encapsulating one result of a history query.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/HistoryItem",
      "id": {
        "!doc": "The unique identifier for the item.",
        "!type": "string"
      },
      "url": {
        "!doc": "The URL navigated to by a user.",
        "!type": "string"
      },
      "title": {
        "!doc": "The title of the page when it was last loaded.",
        "!type": "string"
      },
      "lastVisitTime": {
        "!doc": "When this page was last loaded, represented in milliseconds since the epoch.",
        "!type": "number"
      },
      "visitCount": {
        "!doc": "The number of times the user has navigated to this page.",
        "!type": "number"
      },
      "typedCount": {
        "!doc": "The number of times the user has navigated to this page by typing in the address.",
        "!type": "number"
      }
    },
    "history.VisitItem": {
      "!doc": "An object encapsulating one visit to a URL.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/VisitItem",
      "id": {
        "!doc": "The unique identifier for the item.",
        "!type": "string"
      },
      "visitId": {
        "!doc": "The unique identifier for this visit.",
        "!type": "string"
      },
      "visitTime": {
        "!doc": "When this visit occurred, represented in milliseconds since the epoch.",
        "!type": "number"
      },
      "referringVisitId": {
        "!doc": "The visit ID of the referrer.",
        "!type": "string"
      },
      "transition": {
        "!doc": "The $(topic:transition-types)[transition type] for this visit from its referrer.",
        "!type": "+history.TransitionType"
      }
    },
    "identity.AccountInfo": {
      "!doc": "An object encapsulating an OAuth account id.",
      "id": {
        "!doc": "A unique identifier for the account. This ID will not change for the lifetime of the account. ",
        "!type": "string"
      }
    },
    "contextMenus.ContextType": {
      "!doc": "The different contexts a menu can appear in. Specifying 'all' is equivalent to the combination of all other contexts except for 'tab' and 'tools_menu'."
    },
    "menus.ContextType": {
      "!doc": "The different contexts a menu can appear in. Specifying 'all' is equivalent to the combination of all other contexts except for 'tab' and 'tools_menu'.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/ContextType"
    },
    "menus.ItemType": {
      "!doc": "The type of menu item.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/ItemType"
    },
    "menus.OnClickData": {
      "!doc": "Information sent when a context menu item is clicked.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/OnClickData",
      "menuItemId": {
        "!doc": "The ID of the menu item that was clicked.",
        "!type": "[number]?, [string]?"
      },
      "parentMenuItemId": {
        "!doc": "The parent ID, if any, for the item clicked.",
        "!type": "[number]?, [string]?"
      },
      "viewType": {
        "!doc": "The type of view where the menu is clicked. May be unset if the menu is not associated with a view.",
        "!type": "+extension.ViewType"
      },
      "mediaType": {
        "!doc": "One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements.",
        "!type": "string"
      },
      "linkText": {
        "!doc": "If the element is a link, the text of that link.",
        "!type": "string"
      },
      "linkUrl": {
        "!doc": "If the element is a link, the URL it points to.",
        "!type": "string"
      },
      "srcUrl": {
        "!doc": "Will be present for elements with a 'src' URL.",
        "!type": "string"
      },
      "pageUrl": {
        "!doc": "The URL of the page where the menu item was clicked. This property is not set if the click occured in a context where there is no current page, such as in a launcher context menu.",
        "!type": "string"
      },
      "frameId": {
        "!doc": "The id of the frame of the element where the context menu was clicked.",
        "!type": "number"
      },
      "frameUrl": {
        "!doc": " The URL of the frame of the element where the context menu was clicked, if it was in a frame.",
        "!type": "string"
      },
      "selectionText": {
        "!doc": "The text for the context selection, if any.",
        "!type": "string"
      },
      "editable": {
        "!doc": "A flag indicating whether the element is editable (text input, textarea, etc.).",
        "!type": "bool"
      },
      "wasChecked": {
        "!doc": "A flag indicating the state of a checkbox or radio item before it was clicked.",
        "!type": "bool"
      },
      "checked": {
        "!doc": "A flag indicating the state of a checkbox or radio item after it is clicked.",
        "!type": "bool"
      },
      "bookmarkId": {
        "!doc": "The id of the bookmark where the context menu was clicked, if it was on a bookmark.",
        "!type": "string"
      },
      "modifiers": {
        "!doc": "An array of keyboard modifiers that were held while the menu item was clicked.",
        "!type": "[string]"
      },
      "button": {
        "!doc": "An integer value of button by which menu item was clicked.",
        "!type": "number"
      },
      "targetElementId": {
        "!doc": "An identifier of the clicked element, if any. Use menus.getTargetElement in the page to find the corresponding element.",
        "!type": "number"
      }
    },
    "normandyAddonStudy.Study": {
      "recipeId": {
        "!doc": "The ID of the recipe for the study.",
        "!type": "number"
      },
      "slug": {
        "!doc": "A slug to identify the study.",
        "!type": "string"
      },
      "userFacingName": {
        "!doc": "The name presented on about:studies.",
        "!type": "string"
      },
      "userFacingDescription": {
        "!doc": "The description presented on about:studies.",
        "!type": "string"
      },
      "branch": {
        "!doc": "The study branch in which the user is enrolled.",
        "!type": "string"
      },
      "active": {
        "!doc": "The state of the study.",
        "!type": "bool"
      },
      "addonId": {
        "!doc": "The ID of the extension installed by the study.",
        "!type": "string"
      },
      "addonUrl": {
        "!doc": "The URL of the XPI that was downloaded and installed by the study.",
        "!type": "string"
      },
      "addonVersion": {
        "!doc": "The version of the extension installed by the study.",
        "!type": "string"
      },
      "studyStartDate": {
        "!doc": "The start date for the study.",
        "!type": "+extensionTypes.Date"
      },
      "studyEndDate": {
        "!doc": "The end date for the study.",
        "!type": "+extensionTypes.Date"
      },
      "extensionApiId": {
        "!doc": "The record ID for the extension in Normandy server's database.",
        "!type": "number"
      },
      "extensionHash": {
        "!doc": "A hash of the extension XPI file.",
        "!type": "string"
      },
      "extensionHashAlgorithm": {
        "!doc": "The algorithm used to hash the extension XPI file.",
        "!type": "string"
      }
    },
    "omnibox.DescriptionStyleType": {
      "!doc": "The style type."
    },
    "omnibox.OnInputEnteredDisposition": {
      "!doc": "The window disposition for the omnibox query. This is the recommended context to display results. For example, if the omnibox command is to navigate to a certain URL, a disposition of 'newForegroundTab' means the navigation should take place in a new selected tab.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/omnibox/OnInputEnteredDisposition"
    },
    "omnibox.SuggestResult": {
      "!doc": "A suggest result.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/omnibox/SuggestResult",
      "content": {
        "!doc": "The text that is put into the URL bar, and that is sent to the extension when the user chooses this entry.",
        "!type": "string"
      },
      "description": {
        "!doc": "The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. <dim><match>dimmed match</match></dim>. You must escape the five predefined entities to display them as text: stackoverflow.com/a/1091953/89484 ",
        "!type": "string"
      },
      "descriptionStyles": {
        "!doc": "An array of style ranges for the description, as provided by the extension.",
        "!type": "[object]"
      },
      "descriptionStylesRaw": {
        "!doc": "An array of style ranges for the description, as provided by ToValue().",
        "!type": "[object]"
      }
    },
    "omnibox.DefaultSuggestResult": {
      "!doc": "A suggest result.",
      "description": {
        "!doc": "The text that is displayed in the URL dropdown.",
        "!type": "string"
      },
      "descriptionStyles": {
        "!doc": "An array of style ranges for the description, as provided by the extension.",
        "!type": "[object]"
      },
      "descriptionStylesRaw": {
        "!doc": "An array of style ranges for the description, as provided by ToValue().",
        "!type": "[object]"
      }
    },
    "pageAction.ImageDataType": {
      "!doc": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element).",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/ImageDataType"
    },
    "search.SearchEngine": {
      "!doc": "An object encapsulating a search engine",
      "name": {
        "!type": "string"
      },
      "isDefault": {
        "!type": "bool"
      },
      "alias": {
        "!type": "string"
      },
      "favIconUrl": {
        "!type": "string"
      }
    },
    "sessions.Filter": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/Filter",
      "maxResults": {
        "!doc": "The maximum number of entries to be fetched in the requested list. Omit this parameter to fetch the maximum number of entries ($(ref:sessions.MAX_SESSION_RESULTS)).",
        "!type": "number"
      }
    },
    "sessions.Session": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/Session",
      "lastModified": {
        "!doc": "The time when the window or tab was closed or modified, represented in milliseconds since the epoch.",
        "!type": "number"
      },
      "tab": {
        "!doc": "The $(ref:tabs.Tab), if this entry describes a tab. Either this or $(ref:sessions.Session.window) will be set.",
        "!type": "+tabs.Tab"
      },
      "window": {
        "!doc": "The $(ref:windows.Window), if this entry describes a window. Either this or $(ref:sessions.Session.tab) will be set.",
        "!type": "+windows.Window"
      }
    },
    "sessions.Device": {
      "info": {
        "!type": "string"
      },
      "deviceName": {
        "!doc": "The name of the foreign device.",
        "!type": "string"
      },
      "sessions": {
        "!doc": "A list of open window sessions for the foreign device, sorted from most recently to least recently modified session.",
        "!type": "[+sessions.Session]"
      }
    },
    "sidebarAction.ImageDataType": {
      "!doc": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element).",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/ImageDataType"
    },
    "tabs.MutedInfoReason": {
      "!doc": "An event that caused a muted state change.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/MutedInfoReason"
    },
    "tabs.MutedInfo": {
      "!doc": "Tab muted state and the reason for the last state change.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/MutedInfo",
      "muted": {
        "!doc": "Whether the tab is prevented from playing sound (but hasn't necessarily recently produced sound). Equivalent to whether the muted audio indicator is showing.",
        "!type": "bool"
      },
      "reason": {
        "!doc": "The reason the tab was muted or unmuted. Not set if the tab's mute state has never been changed.",
        "!type": "+tabs.MutedInfoReason"
      },
      "extensionId": {
        "!doc": "The ID of the extension that changed the muted state. Not set if an extension was not the reason the muted state last changed.",
        "!type": "string"
      }
    },
    "tabs.SharingState": {
      "!doc": "Tab sharing state for screen, microphone and camera.",
      "screen": {
        "!doc": "If the tab is sharing the screen the value will be one of \"Screen\", \"Window\", or \"Application\", or undefined if not screen sharing.",
        "!type": "string"
      },
      "camera": {
        "!doc": "True if the tab is using the camera.",
        "!type": "bool"
      },
      "microphone": {
        "!doc": "True if the tab is using the microphone.",
        "!type": "bool"
      }
    },
    "tabs.Tab": {
      "id": {
        "!doc": "The ID of the tab. Tab IDs are unique within a browser session. Under some circumstances a Tab may not be assigned an ID, for example when querying foreign tabs using the $(ref:sessions) API, in which case a session ID may be present. Tab ID can also be set to $(ref:tabs.TAB_ID_NONE) for apps and devtools windows.",
        "!type": "number"
      },
      "index": {
        "!doc": "The zero-based index of the tab within its window.",
        "!type": "number"
      },
      "windowId": {
        "!doc": "The ID of the window the tab is contained within.",
        "!type": "number"
      },
      "openerTabId": {
        "!doc": "The ID of the tab that opened this tab, if any. This property is only present if the opener tab still exists.",
        "!type": "number"
      },
      "selected": {
        "!doc": "Whether the tab is selected.",
        "!type": "bool"
      },
      "highlighted": {
        "!doc": "Whether the tab is highlighted. Works as an alias of active",
        "!type": "bool"
      },
      "active": {
        "!doc": "Whether the tab is active in its window. (Does not necessarily mean the window is focused.)",
        "!type": "bool"
      },
      "pinned": {
        "!doc": "Whether the tab is pinned.",
        "!type": "bool"
      },
      "lastAccessed": {
        "!doc": "The last time the tab was accessed as the number of milliseconds since epoch.",
        "!type": "number"
      },
      "audible": {
        "!doc": "Whether the tab has produced sound over the past couple of seconds (but it might not be heard if also muted). Equivalent to whether the speaker audio indicator is showing.",
        "!type": "bool"
      },
      "mutedInfo": {
        "!doc": "Current tab muted state and the reason for the last state change.",
        "!type": "+tabs.MutedInfo"
      },
      "url": {
        "!doc": "The URL the tab is displaying. This property is only present if the extension's manifest includes the <code>\"tabs\"</code> permission.",
        "!type": "string"
      },
      "title": {
        "!doc": "The title of the tab. This property is only present if the extension's manifest includes the <code>\"tabs\"</code> permission.",
        "!type": "string"
      },
      "favIconUrl": {
        "!doc": "The URL of the tab's favicon. This property is only present if the extension's manifest includes the <code>\"tabs\"</code> permission. It may also be an empty string if the tab is loading.",
        "!type": "string"
      },
      "status": {
        "!doc": "Either <em>loading</em> or <em>complete</em>.",
        "!type": "string"
      },
      "discarded": {
        "!doc": "True while the tab is not loaded with content.",
        "!type": "bool"
      },
      "incognito": {
        "!doc": "Whether the tab is in an incognito window.",
        "!type": "bool"
      },
      "width": {
        "!doc": "The width of the tab in pixels.",
        "!type": "number"
      },
      "height": {
        "!doc": "The height of the tab in pixels.",
        "!type": "number"
      },
      "hidden": {
        "!doc": "True if the tab is hidden.",
        "!type": "bool"
      },
      "sessionId": {
        "!doc": "The session ID used to uniquely identify a Tab obtained from the $(ref:sessions) API.",
        "!type": "string"
      },
      "cookieStoreId": {
        "!doc": "The CookieStoreId used for the tab.",
        "!type": "string"
      },
      "isArticle": {
        "!doc": "Whether the document in the tab can be rendered in reader mode.",
        "!type": "bool"
      },
      "isInReaderMode": {
        "!doc": "Whether the document in the tab is being rendered in reader mode.",
        "!type": "bool"
      },
      "sharingState": {
        "!doc": "Current tab sharing state for screen, microphone and camera.",
        "!type": "+tabs.SharingState"
      },
      "attention": {
        "!doc": "Whether the tab is drawing attention.",
        "!type": "bool"
      },
      "successorTabId": {
        "!doc": "The ID of this tab's successor, if any; $(ref:tabs.TAB_ID_NONE) otherwise.",
        "!type": "number"
      }
    },
    "tabs.ZoomSettingsMode": {
      "!doc": "Defines how zoom changes are handled, i.e. which entity is responsible for the actual scaling of the page; defaults to <code>automatic</code>.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/ZoomSettingsMode"
    },
    "tabs.ZoomSettingsScope": {
      "!doc": "Defines whether zoom changes will persist for the page's origin, or only take effect in this tab; defaults to <code>per-origin</code> when in <code>automatic</code> mode, and <code>per-tab</code> otherwise.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/ZoomSettingsScope"
    },
    "tabs.ZoomSettings": {
      "!doc": "Defines how zoom changes in a tab are handled and at what scope.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/ZoomSettings",
      "mode": {
        "!doc": "Defines how zoom changes are handled, i.e. which entity is responsible for the actual scaling of the page; defaults to <code>automatic</code>.",
        "!type": "+tabs.ZoomSettingsMode"
      },
      "scope": {
        "!doc": "Defines whether zoom changes will persist for the page's origin, or only take effect in this tab; defaults to <code>per-origin</code> when in <code>automatic</code> mode, and <code>per-tab</code> otherwise.",
        "!type": "+tabs.ZoomSettingsScope"
      },
      "defaultZoomFactor": {
        "!doc": "Used to return the default zoom level for the current tab in calls to tabs.getZoomSettings.",
        "!type": "number"
      }
    },
    "tabs.PageSettings": {
      "!doc": "The page settings including: orientation, scale, background, margins, headers, footers.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/PageSettings",
      "paperSizeUnit": {
        "!doc": "The page size unit: 0 = inches, 1 = millimeters. Default: 0.",
        "!type": "number"
      },
      "paperWidth": {
        "!doc": "The paper width in paper size units. Default: 8.5.",
        "!type": "number"
      },
      "paperHeight": {
        "!doc": "The paper height in paper size units. Default: 11.0.",
        "!type": "number"
      },
      "orientation": {
        "!doc": "The page content orientation: 0 = portrait, 1 = landscape. Default: 0.",
        "!type": "number"
      },
      "scaling": {
        "!doc": "The page content scaling factor: 1.0 = 100% = normal size. Default: 1.0.",
        "!type": "number"
      },
      "shrinkToFit": {
        "!doc": "Whether the page content should shrink to fit the page width (overrides scaling). Default: true.",
        "!type": "bool"
      },
      "showBackgroundColors": {
        "!doc": "Whether the page background colors should be shown. Default: false.",
        "!type": "bool"
      },
      "showBackgroundImages": {
        "!doc": "Whether the page background images should be shown. Default: false.",
        "!type": "bool"
      },
      "edgeLeft": {
        "!doc": "The spacing between the left header/footer and the left edge of the paper (inches). Default: 0.",
        "!type": "number"
      },
      "edgeRight": {
        "!doc": "The spacing between the right header/footer and the right edge of the paper (inches). Default: 0.",
        "!type": "number"
      },
      "edgeTop": {
        "!doc": "The spacing between the top of the headers and the top edge of the paper (inches). Default: 0",
        "!type": "number"
      },
      "edgeBottom": {
        "!doc": "The spacing between the bottom of the footers and the bottom edge of the paper (inches). Default: 0.",
        "!type": "number"
      },
      "marginLeft": {
        "!doc": "The margin between the page content and the left edge of the paper (inches). Default: 0.5.",
        "!type": "number"
      },
      "marginRight": {
        "!doc": "The margin between the page content and the right edge of the paper (inches). Default: 0.5.",
        "!type": "number"
      },
      "marginTop": {
        "!doc": "The margin between the page content and the top edge of the paper (inches). Default: 0.5.",
        "!type": "number"
      },
      "marginBottom": {
        "!doc": "The margin between the page content and the bottom edge of the paper (inches). Default: 0.5.",
        "!type": "number"
      },
      "headerLeft": {
        "!doc": "The text for the page's left header. Default: '&T'.",
        "!type": "string"
      },
      "headerCenter": {
        "!doc": "The text for the page's center header. Default: ''.",
        "!type": "string"
      },
      "headerRight": {
        "!doc": "The text for the page's right header. Default: '&U'.",
        "!type": "string"
      },
      "footerLeft": {
        "!doc": "The text for the page's left footer. Default: '&PT'.",
        "!type": "string"
      },
      "footerCenter": {
        "!doc": "The text for the page's center footer. Default: ''.",
        "!type": "string"
      },
      "footerRight": {
        "!doc": "The text for the page's right footer. Default: '&D'.",
        "!type": "string"
      }
    },
    "tabs.TabStatus": {
      "!doc": "Whether the tabs have completed loading.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/TabStatus"
    },
    "tabs.WindowType": {
      "!doc": "The type of window.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/WindowType"
    },
    "tabs.UpdatePropertyName": {
      "!doc": "Event names supported in onUpdated."
    },
    "tabs.UpdateFilter": {
      "!doc": "An object describing filters to apply to tabs.onUpdated events.",
      "urls": {
        "!doc": "A list of URLs or URL patterns. Events that cannot match any of the URLs will be filtered out.  Filtering with urls requires the <code>\"tabs\"</code> or  <code>\"activeTab\"</code> permission.",
        "!type": "[string]"
      },
      "properties": {
        "!doc": "A list of property names. Events that do not match any of the names will be filtered out.",
        "!type": "[+tabs.UpdatePropertyName]"
      },
      "tabId": {
        "!type": "number"
      },
      "windowId": {
        "!type": "number"
      }
    },
    "topSites.MostVisitedURL": {
      "!doc": "An object encapsulating a most visited URL, such as the URLs on the new tab page.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/topSites/MostVisitedURL",
      "url": {
        "!doc": "The most visited URL.",
        "!type": "string"
      },
      "title": {
        "!doc": "The title of the page.",
        "!type": "string"
      },
      "favicon": {
        "!doc": "Data URL for the favicon, if available.",
        "!type": "string"
      },
      "type": {
        "!doc": "The entry type, either <code>url</code> for a normal page link, or <code>search</code> for a search shortcut.",
        "!type": "string"
      }
    },
    "urlbar.Query": {
      "!doc": "A query performed in the urlbar.",
      "isPrivate": {
        "!doc": "Whether the query's browser context is private.",
        "!type": "bool"
      },
      "maxResults": {
        "!doc": "The maximum number of results shown to the user.",
        "!type": "number"
      },
      "searchString": {
        "!doc": "The query's search string.",
        "!type": "string"
      },
      "acceptableSources": {
        "!doc": "List of acceptable source types to return.",
        "!type": "[+urlbar.SourceType]"
      }
    },
    "urlbar.Result": {
      "!doc": "A result of a query. Queries can have many results. Each result is created by a provider.",
      "payload": {
        "!doc": "An object with arbitrary properties depending on the result's type."
      },
      "source": {
        "!doc": "The result's source.",
        "!type": "+urlbar.SourceType"
      },
      "type": {
        "!doc": "The result's type.",
        "!type": "+urlbar.ResultType"
      },
      "suggestedIndex": {
        "!doc": "Suggest a preferred position for this result within the result set.",
        "!type": "number"
      }
    },
    "urlbar.ResultType": {
      "!doc": "Possible types of results. <code>remote_tab</code>: A synced tab from another device. <code>search</code>: A search suggestion from a search engine. <code>tab</code>: An open tab in the browser. <code>tip</code>: An actionable message to help the user with their query. <code>url</code>: A URL that's not one of the other types."
    },
    "urlbar.SourceType": {
      "!doc": "Possible sources of results. <code>bookmarks</code>: The result comes from the user's bookmarks. <code>history</code>: The result comes from the user's history. <code>local</code>: The result comes from some local source not covered by another source type. <code>network</code>: The result comes from some network source not covered by another source type. <code>search</code>: The result comes from a search engine. <code>tabs</code>: The result is an open tab in the browser or a synced tab from another device."
    },
    "urlbar.contextualTip.ContextualTip": {
      "!doc": "An object containing the path to an icon, the title, button title, and link title to set on the contextual tip.",
      "icon": {
        "!doc": "Specifies the default icon and theme icons",
        "defaultIcon": {
          "!doc": "Specifies the default icon to use in the contextual tip.",
          "!type": "[string]?, [+manifest.IconPath]?"
        },
        "themeIcons": {
          "!doc": "Specifies icons to use for dark and light themes. Each item in the array is for a specified icon size.",
          "!type": "[+manifest.ThemeIcons]"
        }
      },
      "title": {
        "!doc": "A string to be used as the contextual tip's title.",
        "!type": "string"
      },
      "buttonTitle": {
        "!doc": "A string to be used as the contextual tip's button's title.",
        "!type": "string"
      },
      "linkTitle": {
        "!doc": "A string to be used as the contextual tip's link's title.",
        "!type": "string"
      }
    },
    "windows.WindowType": {
      "!doc": "The type of browser window this is. Under some circumstances a Window may not be assigned type property, for example when querying closed windows from the $(ref:sessions) API.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/WindowType"
    },
    "windows.WindowState": {
      "!doc": "The state of this browser window. Under some circumstances a Window may not be assigned state property, for example when querying closed windows from the $(ref:sessions) API.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/WindowState"
    },
    "windows.Window": {
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/Window",
      "id": {
        "!doc": "The ID of the window. Window IDs are unique within a browser session. Under some circumstances a Window may not be assigned an ID, for example when querying windows using the $(ref:sessions) API, in which case a session ID may be present.",
        "!type": "number"
      },
      "focused": {
        "!doc": "Whether the window is currently the focused window.",
        "!type": "bool"
      },
      "top": {
        "!doc": "The offset of the window from the top edge of the screen in pixels. Under some circumstances a Window may not be assigned top property, for example when querying closed windows from the $(ref:sessions) API.",
        "!type": "number"
      },
      "left": {
        "!doc": "The offset of the window from the left edge of the screen in pixels. Under some circumstances a Window may not be assigned left property, for example when querying closed windows from the $(ref:sessions) API.",
        "!type": "number"
      },
      "width": {
        "!doc": "The width of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned width property, for example when querying closed windows from the $(ref:sessions) API.",
        "!type": "number"
      },
      "height": {
        "!doc": "The height of the window, including the frame, in pixels. Under some circumstances a Window may not be assigned height property, for example when querying closed windows from the $(ref:sessions) API.",
        "!type": "number"
      },
      "tabs": {
        "!doc": "Array of $(ref:tabs.Tab) objects representing the current tabs in the window.",
        "!type": "[+tabs.Tab]"
      },
      "incognito": {
        "!doc": "Whether the window is incognito.",
        "!type": "bool"
      },
      "type": {
        "!doc": "The type of browser window this is.",
        "!type": "+windows.WindowType"
      },
      "state": {
        "!doc": "The state of this browser window.",
        "!type": "+windows.WindowState"
      },
      "alwaysOnTop": {
        "!doc": "Whether the window is set to be always on top.",
        "!type": "bool"
      },
      "sessionId": {
        "!doc": "The session ID used to uniquely identify a Window obtained from the $(ref:sessions) API.",
        "!type": "string"
      },
      "title": {
        "!doc": "The title of the window. Read-only.",
        "!type": "string"
      }
    },
    "windows.CreateType": {
      "!doc": "Specifies what type of browser window to create. The 'panel' and 'detached_panel' types create a popup unless the '--enable-panels' flag is set.",
      "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/CreateType"
    },
    "windows.GetInfo": {
      "!doc": "Specifies whether the $(ref:windows.Window) returned should contain a list of the $(ref:tabs.Tab) objects.",
      "populate": {
        "!doc": "If true, the $(ref:windows.Window) returned will have a <var>tabs</var> property that contains a list of the $(ref:tabs.Tab) objects. The <code>Tab</code> objects only contain the <code>url</code>, <code>title</code> and <code>favIconUrl</code> properties if the extension's manifest file includes the <code>\"tabs\"</code> permission.",
        "!type": "bool"
      },
      "windowTypes": {
        "!doc": "<code>windowTypes</code> is deprecated and ignored on Firefox.",
        "!type": "[+windows.WindowType]"
      }
    }
  },
  "chrome": {
    "!type": "+browser"
  },
  "browser": {
    "events": {
      "!doc": "The <code>chrome.events</code> namespace contains common types used by APIs dispatching events to notify you when something interesting happens."
    },
    "types": {
      "!doc": "Contains types used by other schemas."
    },
    "extensionTypes": {
      "!doc": "The <code>browser.extensionTypes</code> API contains type declarations for WebExtensions."
    },
    "alarms": {
      "create": {
        "!doc": "Creates an alarm. After the delay is expired, the onAlarm event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm.",
        "!type": "fn(name: string, alarmInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/alarms/create"
      },
      "get": {
        "!doc": "Retrieves details about the specified alarm.",
        "!type": "fn(name: string, callback: fn(alarm: +alarms.Alarm))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/alarms/get"
      },
      "getAll": {
        "!doc": "Gets an array of all the alarms.",
        "!type": "fn(callback: fn(alarms: [+alarms.Alarm]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/alarms/getAll"
      },
      "clear": {
        "!doc": "Clears the alarm with the given name.",
        "!type": "fn(name: string, callback: fn(wasCleared: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/alarms/clear"
      },
      "clearAll": {
        "!doc": "Clears all alarms.",
        "!type": "fn(callback: fn(wasCleared: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/alarms/clearAll"
      },
      "onAlarm": {
        "!doc": "Fired when an alarm has expired. Useful for transient background pages.",
        "!type": "fn(name: +alarms.Alarm)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/alarms/onAlarm"
      }
    },
    "browserSettings": {
      "!doc": "Use the <code>browser.browserSettings</code> API to control global settings of the browser.",
      "allowPopupsForUserEvents": {
        "!doc": "Allows or disallows pop-up windows from opening in response to user events.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/allowPopupsForUserEvents"
      },
      "cacheEnabled": {
        "!doc": "Enables or disables the browser cache.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/cacheEnabled"
      },
      "closeTabsByDoubleClick": {
        "!doc": "This boolean setting controls whether the selected tab can be closed with a double click.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/closeTabsByDoubleClick"
      },
      "contextMenuShowEvent": {
        "!doc": "Controls after which mouse event context menus popup. This setting's value is of type ContextMenuMouseEvent, which has possible values of <code>mouseup</code> and <code>mousedown</code>.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/contextMenuShowEvent"
      },
      "ftpProtocolEnabled": {
        "!doc": "This boolean setting controls whether the FTP protocol is enabled.",
        "!type": "+types.Setting"
      },
      "homepageOverride": {
        "!doc": "Returns the value of the overridden home page. Read-only.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/homepageOverride"
      },
      "imageAnimationBehavior": {
        "!doc": "Controls the behaviour of image animation in the browser. This setting's value is of type ImageAnimationBehavior, defaulting to <code>normal</code>.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/imageAnimationBehavior"
      },
      "newTabPageOverride": {
        "!doc": "Returns the value of the overridden new tab page. Read-only.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/newTabPageOverride"
      },
      "newTabPosition": {
        "!doc": "Controls where new tabs are opened. `afterCurrent` will open all new tabs next to the current tab, `relatedAfterCurrent` will open only related tabs next to the current tab, and `atEnd` will open all tabs at the end of the tab strip. The default is `relatedAfterCurrent`.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/newTabPosition"
      },
      "openBookmarksInNewTabs": {
        "!doc": "This boolean setting controls whether bookmarks are opened in the current tab or in a new tab.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/openBookmarksInNewTabs"
      },
      "openSearchResultsInNewTabs": {
        "!doc": "This boolean setting controls whether search results are opened in the current tab or in a new tab.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/openSearchResultsInNewTabs"
      },
      "openUrlbarResultsInNewTabs": {
        "!doc": "This boolean setting controls whether urlbar results are opened in the current tab or in a new tab.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/openUrlbarResultsInNewTabs"
      },
      "webNotificationsDisabled": {
        "!doc": "Disables webAPI notifications.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/webNotificationsDisabled"
      },
      "overrideDocumentColors": {
        "!doc": "This setting controls whether the user-chosen colors override the page's colors.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/overrideDocumentColors"
      },
      "useDocumentFonts": {
        "!doc": "This setting controls whether the document's fonts are used.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings/useDocumentFonts"
      }
    },
    "clipboard": {
      "!doc": "Offers the ability to write to the clipboard. Reading is not supported because the clipboard can already be read through the standard web platform APIs.",
      "setImageData": {
        "!doc": "Copy an image to the clipboard. The image is re-encoded before it is written to the clipboard. If the image is invalid, the clipboard is not modified.",
        "!type": "fn(imageData: object, imageType: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/clipboard/setImageData"
      }
    },
    "contentScripts": {
      "register": {
        "!doc": "Register a content script programmatically",
        "!type": "fn(contentScriptOptions: +contentScripts.RegisteredContentScriptOptions)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contentScripts/register"
      }
    },
    "contextualIdentities": {
      "!doc": "Use the <code>browser.contextualIdentities</code> API to query and modify contextual identity, also called as containers.",
      "get": {
        "!doc": "Retrieves information about a single contextual identity.",
        "!type": "fn(cookieStoreId: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/get"
      },
      "query": {
        "!doc": "Retrieves all contextual identities",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/query"
      },
      "create": {
        "!doc": "Creates a contextual identity with the given data.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/create"
      },
      "update": {
        "!doc": "Updates a contextual identity with the given data.",
        "!type": "fn(cookieStoreId: string, details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/update"
      },
      "remove": {
        "!doc": "Deletes a contetual identity by its cookie Store ID.",
        "!type": "fn(cookieStoreId: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/remove"
      },
      "onUpdated": {
        "!doc": "Fired when a container is updated.",
        "!type": "fn(changeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/onUpdated"
      },
      "onCreated": {
        "!doc": "Fired when a new container is created.",
        "!type": "fn(changeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/onCreated"
      },
      "onRemoved": {
        "!doc": "Fired when a container is removed.",
        "!type": "fn(changeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/contextualIdentities/onRemoved"
      }
    },
    "cookies": {
      "!doc": "Use the <code>browser.cookies</code> API to query and modify cookies, and to be notified when they change.",
      "get": {
        "!doc": "Retrieves information about a single cookie. If more than one cookie of the same name exists for the given URL, the one with the longest path will be returned. For cookies with the same path length, the cookie with the earliest creation time will be returned.",
        "!type": "fn(details: object, callback: fn(cookie: +cookies.Cookie))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/get"
      },
      "getAll": {
        "!doc": "Retrieves all cookies from a single cookie store that match the given information.  The cookies returned will be sorted, with those with the longest path first.  If multiple cookies have the same path length, those with the earliest creation time will be first.",
        "!type": "fn(details: object, callback: fn(cookies: [+cookies.Cookie]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/getAll"
      },
      "set": {
        "!doc": "Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.",
        "!type": "fn(details: object, callback: fn(cookie: +cookies.Cookie))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/set"
      },
      "remove": {
        "!doc": "Deletes a cookie by name.",
        "!type": "fn(details: object, callback: fn(details: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/remove"
      },
      "getAllCookieStores": {
        "!doc": "Lists all existing cookie stores.",
        "!type": "fn(callback: fn(cookieStores: [+cookies.CookieStore]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/getAllCookieStores"
      },
      "onChanged": {
        "!doc": "Fired when a cookie is set or removed. As a special case, note that updating a cookie's properties is implemented as a two step process: the cookie to be updated is first removed entirely, generating a notification with \"cause\" of \"overwrite\" .  Afterwards, a new cookie is written with the updated values, generating a second notification with \"cause\" \"explicit\".",
        "!type": "fn(changeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/cookies/onChanged"
      }
    },
    "dns": {
      "!doc": "Asynchronous DNS API",
      "resolve": {
        "!doc": "Resolves a hostname to a DNS record.",
        "!type": "fn(hostname: string, flags: +dns.ResolveFlags)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/dns/resolve"
      }
    },
    "downloads": {
      "download": {
        "!doc": "Download a URL. If the URL uses the HTTP[S] protocol, then the request will include all cookies currently set for its hostname. If both <code>filename</code> and <code>saveAs</code> are specified, then the Save As dialog will be displayed, pre-populated with the specified <code>filename</code>. If the download started successfully, <code>callback</code> will be called with the new <a href='#type-DownloadItem'>DownloadItem</a>'s <code>downloadId</code>. If there was an error starting the download, then <code>callback</code> will be called with <code>downloadId=undefined</code> and <a href='extension.html#property-lastError'>chrome.extension.lastError</a> will contain a descriptive string. The error strings are not guaranteed to remain backwards compatible between releases. You must not parse it.",
        "!type": "fn(options: object, callback: fn(downloadId: number))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/download"
      },
      "search": {
        "!doc": "Find <a href='#type-DownloadItem'>DownloadItems</a>. Set <code>query</code> to the empty object to get all <a href='#type-DownloadItem'>DownloadItems</a>. To get a specific <a href='#type-DownloadItem'>DownloadItem</a>, set only the <code>id</code> field.",
        "!type": "fn(query: +downloads.DownloadQuery, callback: fn(results: [+downloads.DownloadItem]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/search"
      },
      "pause": {
        "!doc": "Pause the download. If the request was successful the download is in a paused state. Otherwise <a href='extension.html#property-lastError'>chrome.extension.lastError</a> contains an error message. The request will fail if the download is not active.",
        "!type": "fn(downloadId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/pause"
      },
      "resume": {
        "!doc": "Resume a paused download. If the request was successful the download is in progress and unpaused. Otherwise <a href='extension.html#property-lastError'>chrome.extension.lastError</a> contains an error message. The request will fail if the download is not active.",
        "!type": "fn(downloadId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/resume"
      },
      "cancel": {
        "!doc": "Cancel a download. When <code>callback</code> is run, the download is cancelled, completed, interrupted or doesn't exist anymore.",
        "!type": "fn(downloadId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/cancel"
      },
      "getFileIcon": {
        "!doc": "Retrieve an icon for the specified download. For new downloads, file icons are available after the <a href='#event-onCreated'>onCreated</a> event has been received. The image returned by this function while a download is in progress may be different from the image returned after the download is complete. Icon retrieval is done by querying the underlying operating system or toolkit depending on the platform. The icon that is returned will therefore depend on a number of factors including state of the download, platform, registered file types and visual theme. If a file icon cannot be determined, <a href='extension.html#property-lastError'>chrome.extension.lastError</a> will contain an error message.",
        "!type": "fn(downloadId: number, options: object, callback: fn(iconURL: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/getFileIcon"
      },
      "open": {
        "!doc": "Open the downloaded file.",
        "!type": "fn(downloadId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/open"
      },
      "show": {
        "!doc": "Show the downloaded file in its folder in a file manager.",
        "!type": "fn(downloadId: number, callback: fn(success: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/show"
      },
      "showDefaultFolder": {
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/showDefaultFolder"
      },
      "erase": {
        "!doc": "Erase matching <a href='#type-DownloadItem'>DownloadItems</a> from history",
        "!type": "fn(query: +downloads.DownloadQuery, callback: fn(erasedIds: [number]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/erase"
      },
      "removeFile": {
        "!type": "fn(downloadId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/removeFile"
      },
      "acceptDanger": {
        "!doc": "Prompt the user to either accept or cancel a dangerous download. <code>acceptDanger()</code> does not automatically accept dangerous downloads.",
        "!type": "fn(downloadId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/acceptDanger"
      },
      "drag": {
        "!doc": "Initiate dragging the file to another application.",
        "!type": "fn(downloadId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/drag"
      },
      "setShelfEnabled": {
        "!type": "fn(enabled: bool)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/setShelfEnabled"
      },
      "onCreated": {
        "!doc": "This event fires with the <a href='#type-DownloadItem'>DownloadItem</a> object when a download begins.",
        "!type": "fn(downloadItem: +downloads.DownloadItem)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/onCreated"
      },
      "onErased": {
        "!doc": "Fires with the <code>downloadId</code> when a download is erased from history.",
        "!type": "fn(downloadId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/onErased"
      },
      "onChanged": {
        "!doc": "When any of a <a href='#type-DownloadItem'>DownloadItem</a>'s properties except <code>bytesReceived</code> changes, this event fires with the <code>downloadId</code> and an object containing the properties that changed.",
        "!type": "fn(downloadDelta: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/downloads/onChanged"
      }
    },
    "extension": {
      "!doc": "The <code>browser.extension</code> API has utilities that can be used by any extension page. It includes support for exchanging messages between an extension and its content scripts or between extensions, as described in detail in $(topic:messaging)[Message Passing].",
      "getURL": {
        "!doc": "Converts a relative path within an extension install directory to a fully-qualified URL.",
        "!type": "fn(path: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/getURL"
      },
      "getViews": {
        "!doc": "Returns an array of the JavaScript 'window' objects for each of the pages running inside the current extension.",
        "!type": "fn(fetchProperties: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/getViews"
      },
      "getBackgroundPage": {
        "!doc": "Returns the JavaScript 'window' object for the background page running inside the current extension. Returns null if the extension has no background page.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/getBackgroundPage"
      },
      "isAllowedIncognitoAccess": {
        "!doc": "Retrieves the state of the extension's access to Incognito-mode (as determined by the user-controlled 'Allowed in Incognito' checkbox.",
        "!type": "fn(callback: fn(isAllowedAccess: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/isAllowedIncognitoAccess"
      },
      "isAllowedFileSchemeAccess": {
        "!doc": "Retrieves the state of the extension's access to the 'file://' scheme (as determined by the user-controlled 'Allow access to File URLs' checkbox.",
        "!type": "fn(callback: fn(isAllowedAccess: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/isAllowedFileSchemeAccess"
      },
      "setUpdateUrlData": {
        "!doc": "Sets the value of the ap CGI parameter used in the extension's update URL.  This value is ignored for extensions that are hosted in the browser vendor's store.",
        "!type": "fn(data: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/setUpdateUrlData"
      },
      "onRequest": {
        "!doc": "Fired when a request is sent from either an extension process or a content script.",
        "!type": "fn(request: ?, sender: +runtime.MessageSender, sendResponse: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/onRequest"
      },
      "onRequestExternal": {
        "!doc": "Fired when a request is sent from another extension.",
        "!type": "fn(request: ?, sender: +runtime.MessageSender, sendResponse: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/onRequestExternal"
      },
      "lastError": {
        "!doc": "Set for the lifetime of a callback if an ansychronous extension api has resulted in an error. If no error has occured lastError will be <var>undefined</var>.",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/lastError",
        "message": {
          "!doc": "Description of the error that has taken place.",
          "!type": "string"
        }
      },
      "inIncognitoContext": {
        "!doc": "True for content scripts running inside incognito tabs, and for extension pages running inside an incognito process. The latter only applies to extensions with 'split' incognito_behavior.",
        "!type": "bool",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/extension/inIncognitoContext"
      }
    },
    "activityLog": {
      "!doc": "Monitor extension activity",
      "onExtensionActivity": {
        "!doc": "Receives an activityItem for each logging event.",
        "!type": "fn(details: object)"
      }
    },
    "i18n": {
      "!doc": "Use the <code>browser.i18n</code> infrastructure to implement internationalization across your whole app or extension.",
      "getAcceptLanguages": {
        "!doc": "Gets the accept-languages of the browser. This is different from the locale used by the browser; to get the locale, use $(ref:i18n.getUILanguage).",
        "!type": "fn(callback: fn(languages: [+i18n.LanguageCode]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/i18n/getAcceptLanguages"
      },
      "getMessage": {
        "!doc": "Gets the localized string for the specified message. If the message is missing, this method returns an empty string (''). If the format of the <code>getMessage()</code> call is wrong &mdash; for example, <em>messageName</em> is not a string or the <em>substitutions</em> array has more than 9 elements &mdash; this method returns <code>undefined</code>.",
        "!type": "fn(messageName: string, substitutions: ?)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/i18n/getMessage"
      },
      "getUILanguage": {
        "!doc": "Gets the browser UI language of the browser. This is different from $(ref:i18n.getAcceptLanguages) which returns the preferred user languages.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/i18n/getUILanguage"
      },
      "detectLanguage": {
        "!doc": "Detects the language of the provided text using CLD.",
        "!type": "fn(text: string, callback: fn(result: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/i18n/detectLanguage"
      }
    },
    "idle": {
      "!doc": "Use the <code>browser.idle</code> API to detect when the machine's idle state changes.",
      "queryState": {
        "!doc": "Returns \"idle\" if the user has not generated any input for a specified number of seconds, or \"active\" otherwise.",
        "!type": "fn(detectionIntervalInSeconds: number, callback: fn(newState: +idle.IdleState))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/idle/queryState"
      },
      "setDetectionInterval": {
        "!doc": "Sets the interval, in seconds, used to determine when the system is in an idle state for onStateChanged events. The default interval is 60 seconds.",
        "!type": "fn(intervalInSeconds: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/idle/setDetectionInterval"
      },
      "onStateChanged": {
        "!doc": "Fired when the system changes to an active or idle state. The event fires with \"idle\" if the the user has not generated any input for a specified number of seconds, and \"active\" when the user generates input on an idle system.",
        "!type": "fn(newState: +idle.IdleState)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/idle/onStateChanged"
      }
    },
    "management": {
      "!doc": "The <code>browser.management</code> API provides ways to manage the list of extensions that are installed and running.",
      "getAll": {
        "!doc": "Returns a list of information about installed extensions.",
        "!type": "fn(callback: fn(result: [+management.ExtensionInfo]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/getAll"
      },
      "get": {
        "!doc": "Returns information about the installed extension that has the given ID.",
        "!type": "fn(id: +manifest.ExtensionID, callback: fn(result: +management.ExtensionInfo))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/get"
      },
      "install": {
        "!doc": "Installs and enables a theme extension from the given url.",
        "!type": "fn(options: object, callback: fn(result: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/install"
      },
      "getSelf": {
        "!doc": "Returns information about the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.",
        "!type": "fn(callback: fn(result: +management.ExtensionInfo))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/getSelf"
      },
      "uninstallSelf": {
        "!doc": "Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.",
        "!type": "fn(options: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/uninstallSelf"
      },
      "setEnabled": {
        "!doc": "Enables or disables the given add-on.",
        "!type": "fn(id: string, enabled: bool, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/setEnabled"
      },
      "onDisabled": {
        "!doc": "Fired when an addon has been disabled.",
        "!type": "fn(info: +management.ExtensionInfo)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/onDisabled"
      },
      "onEnabled": {
        "!doc": "Fired when an addon has been enabled.",
        "!type": "fn(info: +management.ExtensionInfo)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/onEnabled"
      },
      "onInstalled": {
        "!doc": "Fired when an addon has been installed.",
        "!type": "fn(info: +management.ExtensionInfo)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/onInstalled"
      },
      "onUninstalled": {
        "!doc": "Fired when an addon has been uninstalled.",
        "!type": "fn(info: +management.ExtensionInfo)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/management/onUninstalled"
      }
    },
    "networkStatus": {
      "!doc": "This API provides the ability to determine the status of and detect changes in the network connection. This API can only be used in privileged extensions.",
      "getLinkInfo": {
        "!doc": "Returns the $(ref:NetworkLinkInfo} of the current network connection.",
        "!type": "fn()"
      },
      "onConnectionChanged": {
        "!doc": "Fired when the network connection state changes.",
        "!type": "fn(details: +networkStatus.NetworkLinkInfo)"
      }
    },
    "notifications": {
      "create": {
        "!doc": "Creates and displays a notification.",
        "!type": "fn(notificationId: string, options: +notifications.CreateNotificationOptions, callback: fn(notificationId: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/create"
      },
      "update": {
        "!doc": "Updates an existing notification.",
        "!type": "fn(notificationId: string, options: +notifications.UpdateNotificationOptions, callback: fn(wasUpdated: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/update"
      },
      "clear": {
        "!doc": "Clears an existing notification.",
        "!type": "fn(notificationId: string, callback: fn(wasCleared: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/clear"
      },
      "getAll": {
        "!doc": "Retrieves all the notifications.",
        "!type": "fn(callback: fn(notifications: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/getAll"
      },
      "getPermissionLevel": {
        "!doc": "Retrieves whether the user has enabled notifications from this app or extension.",
        "!type": "fn(callback: fn(level: +notifications.PermissionLevel))"
      },
      "onClosed": {
        "!doc": "Fired when the notification closed, either by the system or by user action.",
        "!type": "fn(notificationId: string, byUser: bool)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/onClosed"
      },
      "onClicked": {
        "!doc": "Fired when the user clicked in a non-button area of the notification.",
        "!type": "fn(notificationId: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/onClicked"
      },
      "onButtonClicked": {
        "!doc": "Fired when the  user pressed a button in the notification.",
        "!type": "fn(notificationId: string, buttonIndex: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/onButtonClicked"
      },
      "onPermissionLevelChanged": {
        "!doc": "Fired when the user changes the permission level.",
        "!type": "fn(level: +notifications.PermissionLevel)"
      },
      "onShowSettings": {
        "!doc": "Fired when the user clicked on a link for the app's notification settings.",
        "!type": "fn()"
      },
      "onShown": {
        "!doc": "Fired when the notification is shown.",
        "!type": "fn(notificationId: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/notifications/onShown"
      }
    },
    "permissions": {
      "getAll": {
        "!doc": "Get a list of all the extension's permissions.",
        "!type": "fn(callback: fn(permissions: +permissions.AnyPermissions))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/permissions/getAll"
      },
      "contains": {
        "!doc": "Check if the extension has the given permissions.",
        "!type": "fn(permissions: +permissions.AnyPermissions, callback: fn(result: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/permissions/contains"
      },
      "request": {
        "!doc": "Request the given permissions.",
        "!type": "fn(permissions: +permissions.Permissions, callback: fn(granted: bool))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/permissions/request"
      },
      "remove": {
        "!doc": "Relinquish the given permissions.",
        "!type": "fn(permissions: +permissions.Permissions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/permissions/remove"
      },
      "onAdded": {
        "!doc": "Fired when the extension acquires new permissions.",
        "!type": "fn(permissions: +permissions.Permissions)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/permissions/onAdded"
      },
      "onRemoved": {
        "!doc": "Fired when permissions are removed from the extension.",
        "!type": "fn(permissions: +permissions.Permissions)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/permissions/onRemoved"
      }
    },
    "privacy": {
      "network": {
        "!doc": "Use the <code>browser.privacy</code> API to control usage of the features in the browser that can affect a user's privacy.",
        "networkPredictionEnabled": {
          "!doc": "If enabled, the browser attempts to speed up your web browsing experience by pre-resolving DNS entries, prerendering sites (<code>&lt;link rel='prefetch' ...&gt;</code>), and preemptively opening TCP and SSL connections to servers.  This preference's value is a boolean, defaulting to <code>true</code>.",
          "!type": "+types.Setting"
        },
        "peerConnectionEnabled": {
          "!doc": "Allow users to enable and disable RTCPeerConnections (aka WebRTC).",
          "!type": "+types.Setting"
        },
        "webRTCIPHandlingPolicy": {
          "!doc": "Allow users to specify the media performance/privacy tradeoffs which impacts how WebRTC traffic will be routed and how much local address information is exposed. This preference's value is of type IPHandlingPolicy, defaulting to <code>default</code>.",
          "!type": "+types.Setting"
        }
      },
      "services": {
        "!doc": "Use the <code>browser.privacy</code> API to control usage of the features in the browser that can affect a user's privacy.",
        "passwordSavingEnabled": {
          "!doc": "If enabled, the password manager will ask if you want to save passwords. This preference's value is a boolean, defaulting to <code>true</code>.",
          "!type": "+types.Setting"
        }
      },
      "websites": {
        "!doc": "Use the <code>browser.privacy</code> API to control usage of the features in the browser that can affect a user's privacy.",
        "thirdPartyCookiesAllowed": {
          "!doc": "If disabled, the browser blocks third-party sites from setting cookies. The value of this preference is of type boolean, and the default value is <code>true</code>.",
          "!type": "+types.Setting"
        },
        "hyperlinkAuditingEnabled": {
          "!doc": "If enabled, the browser sends auditing pings when requested by a website (<code>&lt;a ping&gt;</code>). The value of this preference is of type boolean, and the default value is <code>true</code>.",
          "!type": "+types.Setting"
        },
        "referrersEnabled": {
          "!doc": "If enabled, the browser sends <code>referer</code> headers with your requests. Yes, the name of this preference doesn't match the misspelled header. No, we're not going to change it. The value of this preference is of type boolean, and the default value is <code>true</code>.",
          "!type": "+types.Setting"
        },
        "resistFingerprinting": {
          "!doc": "If enabled, the browser attempts to appear similar to other users by reporting generic information to websites. This can prevent websites from uniquely identifying users. Examples of data that is spoofed include number of CPU cores, precision of JavaScript timers, the local timezone, and disabling features such as GamePad support, and the WebSpeech and Navigator APIs. The value of this preference is of type boolean, and the default value is <code>false</code>.",
          "!type": "+types.Setting"
        },
        "firstPartyIsolate": {
          "!doc": "If enabled, the browser will associate all data (including cookies, HSTS data, cached images, and more) for any third party domains with the domain in the address bar. This prevents third party trackers from using directly stored information to identify you across different websites, but may break websites where you login with a third party account (such as a Facebook or Google login.) The value of this preference is of type boolean, and the default value is <code>false</code>.",
          "!type": "+types.Setting"
        },
        "protectedContentEnabled": {
          "!doc": "<strong>Available on Windows and ChromeOS only</strong>: If enabled, the browser provides a unique ID to plugins in order to run protected content. The value of this preference is of type boolean, and the default value is <code>true</code>.",
          "!type": "+types.Setting"
        },
        "trackingProtectionMode": {
          "!doc": "Allow users to specify the mode for tracking protection. This setting's value is of type TrackingProtectionModeOption, defaulting to <code>private_browsing_only</code>.",
          "!type": "+types.Setting"
        },
        "cookieConfig": {
          "!doc": "Allow users to specify the default settings for allowing cookies, as well as whether all cookies should be created as non-persistent cookies. This setting's value is of type CookieConfig.",
          "!type": "+types.Setting"
        }
      }
    },
    "proxy": {
      "!doc": "Provides access to global proxy settings for Firefox and proxy event listeners to handle dynamic proxy implementations.",
      "onRequest": {
        "!doc": "Fired when proxy data is needed for a request.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/proxy/onRequest"
      },
      "onError": {
        "!doc": "Notifies about errors caused by the invalid use of the proxy API.",
        "!type": "fn(error: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/proxy/onError"
      },
      "onProxyError": {
        "!doc": "Please use $(ref:proxy.onError).",
        "!type": "fn(error: object)"
      },
      "settings": {
        "!doc": "Configures proxy settings. This setting's value is an object of type ProxyConfig.",
        "!type": "+types.Setting",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/proxy/settings"
      }
    },
    "runtime": {
      "!doc": "Use the <code>browser.runtime</code> API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs.",
      "getBackgroundPage": {
        "!doc": "Retrieves the JavaScript 'window' object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.",
        "!type": "fn(callback: fn(backgroundPage: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/getBackgroundPage"
      },
      "openOptionsPage": {
        "!doc": "<p>Open your Extension's options page, if possible.</p><p>The precise behavior may depend on your manifest's <code>$(topic:optionsV2)[options_ui]</code> or <code>$(topic:options)[options_page]</code> key, or what the browser happens to support at the time.</p><p>If your Extension does not declare an options page, or the browser failed to create one for some other reason, the callback will set $(ref:lastError).</p>",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/openOptionsPage"
      },
      "getManifest": {
        "!doc": "Returns details about the app or extension from the manifest. The object returned is a serialization of the full $(topic:manifest)[manifest file].",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/getManifest"
      },
      "getURL": {
        "!doc": "Converts a relative path within an app/extension install directory to a fully-qualified URL.",
        "!type": "fn(path: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/getURL"
      },
      "setUninstallURL": {
        "!doc": "Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 255 characters.",
        "!type": "fn(url: string, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/setUninstallURL"
      },
      "reload": {
        "!doc": "Reloads the app or extension.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/reload"
      },
      "requestUpdateCheck": {
        "!doc": "Requests an update check for this app/extension.",
        "!type": "fn(callback: fn(status: +runtime.RequestUpdateCheckStatus, details: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/requestUpdateCheck"
      },
      "restart": {
        "!doc": "Restart the device when the app runs in kiosk mode. Otherwise, it's no-op.",
        "!type": "fn()"
      },
      "connect": {
        "!doc": "Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and $(topic:manifest/externally_connectable)[web messaging]. Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via $(ref:tabs.connect).",
        "!type": "fn(extensionId: string, connectInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/connect"
      },
      "connectNative": {
        "!doc": "Connects to a native application in the host machine.",
        "!type": "fn(application: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/connectNative"
      },
      "sendMessage": {
        "!doc": "Sends a single message to event listeners within your extension/app or a different extension/app. Similar to $(ref:runtime.connect) but only sends a single message, with an optional response. If sending to your extension, the $(ref:runtime.onMessage) event will be fired in each page, or $(ref:runtime.onMessageExternal), if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use $(ref:tabs.sendMessage).",
        "!type": "fn(extensionId: string, message: ?, options: object, responseCallback: fn(response: ?))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/sendMessage"
      },
      "sendNativeMessage": {
        "!doc": "Send a single message to a native application.",
        "!type": "fn(application: string, message: ?, responseCallback: fn(response: ?))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/sendNativeMessage"
      },
      "getBrowserInfo": {
        "!doc": "Returns information about the current browser.",
        "!type": "fn(callback: fn(browserInfo: +runtime.BrowserInfo))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/getBrowserInfo"
      },
      "getPlatformInfo": {
        "!doc": "Returns information about the current platform.",
        "!type": "fn(callback: fn(platformInfo: +runtime.PlatformInfo))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/getPlatformInfo"
      },
      "getPackageDirectoryEntry": {
        "!doc": "Returns a DirectoryEntry for the package directory.",
        "!type": "fn(callback: fn(directoryEntry: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/getPackageDirectoryEntry"
      },
      "onStartup": {
        "!doc": "Fired when a profile that has this extension installed first starts up. This event is not fired for incognito profiles.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onStartup"
      },
      "onInstalled": {
        "!doc": "Fired when the extension is first installed, when the extension is updated to a new version, and when the browser is updated to a new version.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onInstalled"
      },
      "onSuspend": {
        "!doc": "Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded. ",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onSuspend"
      },
      "onSuspendCanceled": {
        "!doc": "Sent after onSuspend to indicate that the app won't be unloaded after all.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onSuspendCanceled"
      },
      "onUpdateAvailable": {
        "!doc": "Fired when an update is available, but isn't installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call $(ref:runtime.reload). If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call $(ref:runtime.reload) manually in response to this event the update will not get installed until the next time the browser itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if $(ref:runtime.reload) is called in response to this event.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onUpdateAvailable"
      },
      "onBrowserUpdateAvailable": {
        "!doc": "Fired when an update for the browser is available, but isn't installed immediately because a browser restart is required.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onBrowserUpdateAvailable"
      },
      "onConnect": {
        "!doc": "Fired when a connection is made from either an extension process or a content script.",
        "!type": "fn(port: +runtime.Port)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onConnect"
      },
      "onConnectExternal": {
        "!doc": "Fired when a connection is made from another extension.",
        "!type": "fn(port: +runtime.Port)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onConnectExternal"
      },
      "onMessage": {
        "!doc": "Fired when a message is sent from either an extension process or a content script.",
        "!type": "fn(message: ?, sender: +runtime.MessageSender, sendResponse: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage"
      },
      "onMessageExternal": {
        "!doc": "Fired when a message is sent from another extension/app. Cannot be used in a content script.",
        "!type": "fn(message: ?, sender: +runtime.MessageSender, sendResponse: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessageExternal"
      },
      "onRestartRequired": {
        "!doc": "Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps.",
        "!type": "fn(reason: +runtime.OnRestartRequiredReason)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onRestartRequired"
      },
      "lastError": {
        "!doc": "This will be defined during an API method callback if there was an error",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/lastError",
        "message": {
          "!doc": "Details about the error which occurred.",
          "!type": "string"
        }
      },
      "id": {
        "!doc": "The ID of the extension/app.",
        "!type": "string",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/id"
      }
    },
    "storage": {
      "!doc": "Use the <code>browser.storage</code> API to store, retrieve, and track changes to user data.",
      "onChanged": {
        "!doc": "Fired when one or more items change.",
        "!type": "fn(changes: object, areaName: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/onChanged"
      },
      "sync": {
        "!doc": "Items in the <code>sync</code> storage area are synced by the browser.",
        "!type": "+storage.StorageArea",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/sync",
        "QUOTA_BYTES": {
          "!doc": "The maximum total amount (in bytes) of data that can be stored in sync storage, as measured by the JSON stringification of every value plus every key's length. Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).",
          "!type": "number"
        },
        "QUOTA_BYTES_PER_ITEM": {
          "!doc": "The maximum size (in bytes) of each individual item in sync storage, as measured by the JSON stringification of its value plus its key length. Updates containing items larger than this limit will fail immediately and set $(ref:runtime.lastError).",
          "!type": "number"
        },
        "MAX_ITEMS": {
          "!doc": "The maximum number of items that can be stored in sync storage. Updates that would cause this limit to be exceeded will fail immediately and set $(ref:runtime.lastError).",
          "!type": "number"
        },
        "MAX_WRITE_OPERATIONS_PER_HOUR": {
          "!doc": "<p>The maximum number of <code>set</code>, <code>remove</code>, or <code>clear</code> operations that can be performed each hour. This is 1 every 2 seconds, a lower ceiling than the short term higher writes-per-minute limit.</p><p>Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).</p>",
          "!type": "number"
        },
        "MAX_WRITE_OPERATIONS_PER_MINUTE": {
          "!doc": "<p>The maximum number of <code>set</code>, <code>remove</code>, or <code>clear</code> operations that can be performed each minute. This is 2 per second, providing higher throughput than writes-per-hour over a shorter period of time.</p><p>Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).</p>",
          "!type": "number"
        },
        "MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE": {
          "!doc": "",
          "!type": "number"
        }
      },
      "local": {
        "!doc": "Items in the <code>local</code> storage area are local to each machine.",
        "!type": "+storage.StorageArea",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/local",
        "QUOTA_BYTES": {
          "!doc": "The maximum amount (in bytes) of data that can be stored in local storage, as measured by the JSON stringification of every value plus every key's length. This value will be ignored if the extension has the <code>unlimitedStorage</code> permission. Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).",
          "!type": "number"
        }
      },
      "managed": {
        "!doc": "Items in the <code>managed</code> storage area are set by administrators or native applications, and are read-only for the extension; trying to modify this namespace results in an error.",
        "!type": "+storage.StorageArea",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/managed",
        "QUOTA_BYTES": {
          "!doc": "The maximum size (in bytes) of the managed storage JSON manifest file. Files larger than this limit will fail to load.",
          "!type": "number"
        }
      }
    },
    "telemetry": {
      "!doc": "Use the <code>browser.telemetry</code> API to send telemetry data to the Mozilla Telemetry service. Restricted to Mozilla privileged webextensions.",
      "submitPing": {
        "!doc": "Submits a custom ping to the Telemetry back-end. See <code>submitExternalPing</code> inside TelemetryController.jsm for more details.",
        "!type": "fn(type: string, message: object, options: object)"
      },
      "canUpload": {
        "!doc": "Checks if Telemetry upload is enabled.",
        "!type": "fn()"
      },
      "scalarAdd": {
        "!doc": "Adds the value to the given scalar.",
        "!type": "fn(name: string, value: number)"
      },
      "scalarSet": {
        "!doc": "Sets the named scalar to the given value. Throws if the value type doesn't match the scalar type.",
        "!type": "fn(name: string, value?: string, value?: bool, value?: number, value?: object)"
      },
      "scalarSetMaximum": {
        "!doc": "Sets the scalar to the maximum of the current and the passed value",
        "!type": "fn(name: string, value: number)"
      },
      "recordEvent": {
        "!doc": "Record an event in Telemetry. Throws when trying to record an unknown event.",
        "!type": "fn(category: string, method: string, object: string, value: string, extra: object)"
      },
      "registerScalars": {
        "!doc": "Register new scalars to record them from addons. See nsITelemetry.idl for more details.",
        "!type": "fn(category: string, data: object)"
      },
      "registerEvents": {
        "!doc": "Register new events to record them from addons. See nsITelemetry.idl for more details.",
        "!type": "fn(category: string, data: object)"
      },
      "setEventRecordingEnabled": {
        "!doc": "Enable recording of events in a category. Events default to recording disabled. This allows to toggle recording for all events in the specified category.",
        "!type": "fn(category: string, enabled: bool)"
      }
    },
    "test": {
      "!doc": "none",
      "notifyFail": {
        "!doc": "Notifies the browser process that test code running in the extension failed.  This is only used for internal unit testing.",
        "!type": "fn(message: string)"
      },
      "notifyPass": {
        "!doc": "Notifies the browser process that test code running in the extension passed.  This is only used for internal unit testing.",
        "!type": "fn(message: string)"
      },
      "log": {
        "!doc": "Logs a message during internal unit testing.",
        "!type": "fn(message: string)"
      },
      "sendMessage": {
        "!doc": "Sends a string message to the browser process, generating a Notification that C++ test code can wait for.",
        "!type": "fn(arg1: ?, arg2: ?)"
      },
      "fail": {
        "!type": "fn(message: ?)"
      },
      "succeed": {
        "!type": "fn(message: ?)"
      },
      "assertTrue": {
        "!type": "fn(test: ?, message: string)"
      },
      "assertFalse": {
        "!type": "fn(test: ?, message: string)"
      },
      "assertBool": {
        "!type": "fn(test?: string, test?: bool, expected: bool, message: string)"
      },
      "checkDeepEq": {
        "!type": "fn(expected: ?, actual: ?)"
      },
      "assertEq": {
        "!type": "fn(expected: ?, actual: ?, message: string)"
      },
      "assertNoLastError": {
        "!type": "fn()"
      },
      "assertLastError": {
        "!type": "fn(expectedError: string)"
      },
      "assertRejects": {
        "!type": "fn(promise: +test.Promise, expectedError: +test.ExpectedError, message: string)"
      },
      "assertThrows": {
        "!type": "fn(func: fn(), expectedError: +test.ExpectedError, message: string)"
      },
      "onMessage": {
        "!doc": "Used to test sending messages to extensions.",
        "!type": "fn(message: string, argument: ?)"
      }
    },
    "theme": {
      "!doc": "The theme API allows customizing of visual elements of the browser.",
      "getCurrent": {
        "!doc": "Returns the current theme for the specified window or the last focused window.",
        "!type": "fn(windowId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/theme/getCurrent"
      },
      "update": {
        "!doc": "Make complete updates to the theme. Resolves when the update has completed.",
        "!type": "fn(windowId: number, details: +manifest.ThemeType)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/theme/update"
      },
      "reset": {
        "!doc": "Removes the updates made to the theme.",
        "!type": "fn(windowId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/theme/reset"
      },
      "onUpdated": {
        "!doc": "Fired when a new theme has been applied",
        "!type": "fn(updateInfo: +theme.ThemeUpdateInfo)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/theme/onUpdated"
      }
    },
    "userScripts": {
      "register": {
        "!doc": "Register a user script programmatically given its $(ref:userScripts.UserScriptOptions), and resolves to a $(ref:userScripts.RegisteredUserScript) instance",
        "!type": "fn(userScriptOptions: +userScripts.UserScriptOptions)"
      },
      "onBeforeScript": {
        "!doc": "Event called when a new userScript global has been created",
        "!type": "fn(userScript: object)"
      }
    },
    "webNavigation": {
      "!doc": "Use the <code>browser.webNavigation</code> API to receive notifications about the status of navigation requests in-flight.",
      "getFrame": {
        "!doc": "Retrieves information about the given frame. A frame refers to an &lt;iframe&gt; or a &lt;frame&gt; of a web page and is identified by a tab ID and a frame ID.",
        "!type": "fn(details: object, callback: fn(details: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/getFrame"
      },
      "getAllFrames": {
        "!doc": "Retrieves information about all frames of a given tab.",
        "!type": "fn(details: object, callback: fn(details: [object]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/getAllFrames"
      },
      "onBeforeNavigate": {
        "!doc": "Fired when a navigation is about to occur.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onBeforeNavigate"
      },
      "onCommitted": {
        "!doc": "Fired when a navigation is committed. The document (and the resources it refers to, such as images and subframes) might still be downloading, but at least part of the document has been received from the server and the browser has decided to switch to the new document.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onCommitted"
      },
      "onDOMContentLoaded": {
        "!doc": "Fired when the page's DOM is fully constructed, but the referenced resources may not finish loading.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onDOMContentLoaded"
      },
      "onCompleted": {
        "!doc": "Fired when a document, including the resources it refers to, is completely loaded and initialized.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onCompleted"
      },
      "onErrorOccurred": {
        "!doc": "Fired when an error occurs and the navigation is aborted. This can happen if either a network error occurred, or the user aborted the navigation.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onErrorOccurred"
      },
      "onCreatedNavigationTarget": {
        "!doc": "Fired when a new window, or a new tab in an existing window, is created to host a navigation.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onCreatedNavigationTarget"
      },
      "onReferenceFragmentUpdated": {
        "!doc": "Fired when the reference fragment of a frame was updated. All future events for that frame will use the updated URL.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onReferenceFragmentUpdated"
      },
      "onTabReplaced": {
        "!doc": "Fired when the contents of the tab is replaced by a different (usually previously pre-rendered) tab.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onTabReplaced"
      },
      "onHistoryStateUpdated": {
        "!doc": "Fired when the frame's history was updated to a new URL. All future events for that frame will use the updated URL.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webNavigation/onHistoryStateUpdated"
      }
    },
    "webRequest": {
      "!doc": "Use the <code>browser.webRequest</code> API to observe and analyze traffic and to intercept, block, or modify requests in-flight.",
      "handlerBehaviorChanged": {
        "!doc": "Needs to be called when the behavior of the webRequest handlers has changed to prevent incorrect handling due to caching. This function call is expensive. Don't call it often.",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/handlerBehaviorChanged"
      },
      "filterResponseData": {
        "!doc": "...",
        "!type": "fn(requestId: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/filterResponseData"
      },
      "getSecurityInfo": {
        "!doc": "Retrieves the security information for the request.  Returns a promise that will resolve to a SecurityInfo object.",
        "!type": "fn(requestId: string, options: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/getSecurityInfo"
      },
      "onBeforeRequest": {
        "!doc": "Fired when a request is about to occur.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onBeforeRequest"
      },
      "onBeforeSendHeaders": {
        "!doc": "Fired before sending an HTTP request, once the request headers are available. This may occur after a TCP connection is made to the server, but before any HTTP data is sent. ",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onBeforeSendHeaders"
      },
      "onSendHeaders": {
        "!doc": "Fired just before a request is going to be sent to the server (modifications of previous onBeforeSendHeaders callbacks are visible by the time onSendHeaders is fired).",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onSendHeaders"
      },
      "onHeadersReceived": {
        "!doc": "Fired when HTTP response headers of a request have been received.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onHeadersReceived"
      },
      "onAuthRequired": {
        "!doc": "Fired when an authentication failure is received. The listener has three options: it can provide authentication credentials, it can cancel the request and display the error page, or it can take no action on the challenge. If bad user credentials are provided, this may be called multiple times for the same request.",
        "!type": "fn(details: object, callback: fn(response: +webRequest.BlockingResponse))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onAuthRequired"
      },
      "onResponseStarted": {
        "!doc": "Fired when the first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onResponseStarted"
      },
      "onBeforeRedirect": {
        "!doc": "Fired when a server-initiated redirect is about to occur.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onBeforeRedirect"
      },
      "onCompleted": {
        "!doc": "Fired when a request is completed.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onCompleted"
      },
      "onErrorOccurred": {
        "!doc": "Fired when an error occurs.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/onErrorOccurred"
      },
      "MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES": {
        "!doc": "The maximum number of times that <code>handlerBehaviorChanged</code> can be called per 10 minute sustained interval. <code>handlerBehaviorChanged</code> is an expensive function call that shouldn't be called often.",
        "!type": "number",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/webRequest/MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES"
      }
    },
    "bookmarks": {
      "!doc": "Use the <code>browser.bookmarks</code> API to create, organize, and otherwise manipulate bookmarks. Also see $(topic:override)[Override Pages], which you can use to create a custom Bookmark Manager page.",
      "get": {
        "!doc": "Retrieves the specified BookmarkTreeNode(s).",
        "!type": "fn(idOrIdList?: string, idOrIdList?: [string], callback: fn(results: [+bookmarks.BookmarkTreeNode]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/get"
      },
      "getChildren": {
        "!doc": "Retrieves the children of the specified BookmarkTreeNode id.",
        "!type": "fn(id: string, callback: fn(results: [+bookmarks.BookmarkTreeNode]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/getChildren"
      },
      "getRecent": {
        "!doc": "Retrieves the recently added bookmarks.",
        "!type": "fn(numberOfItems: number, callback: fn(results: [+bookmarks.BookmarkTreeNode]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/getRecent"
      },
      "getTree": {
        "!doc": "Retrieves the entire Bookmarks hierarchy.",
        "!type": "fn(callback: fn(results: [+bookmarks.BookmarkTreeNode]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/getTree"
      },
      "getSubTree": {
        "!doc": "Retrieves part of the Bookmarks hierarchy, starting at the specified node.",
        "!type": "fn(id: string, callback: fn(results: [+bookmarks.BookmarkTreeNode]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/getSubTree"
      },
      "search": {
        "!doc": "Searches for BookmarkTreeNodes matching the given query. Queries specified with an object produce BookmarkTreeNodes matching all specified properties.",
        "!type": "fn(query?: string, query?: object, callback: fn(results: [+bookmarks.BookmarkTreeNode]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/search"
      },
      "create": {
        "!doc": "Creates a bookmark or folder under the specified parentId.  If url is NULL or missing, it will be a folder.",
        "!type": "fn(bookmark: +bookmarks.CreateDetails, callback: fn(result: +bookmarks.BookmarkTreeNode))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/create"
      },
      "move": {
        "!doc": "Moves the specified BookmarkTreeNode to the provided location.",
        "!type": "fn(id: string, destination: object, callback: fn(result: +bookmarks.BookmarkTreeNode))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/move"
      },
      "update": {
        "!doc": "Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged.  <b>Note:</b> Currently, only 'title' and 'url' are supported.",
        "!type": "fn(id: string, changes: object, callback: fn(result: +bookmarks.BookmarkTreeNode))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/update"
      },
      "remove": {
        "!doc": "Removes a bookmark or an empty bookmark folder.",
        "!type": "fn(id: string, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/remove"
      },
      "removeTree": {
        "!doc": "Recursively removes a bookmark folder.",
        "!type": "fn(id: string, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/removeTree"
      },
      "import": {
        "!doc": "Imports bookmarks from an html bookmark file",
        "!type": "fn(callback: fn())"
      },
      "export": {
        "!doc": "Exports bookmarks to an html bookmark file",
        "!type": "fn(callback: fn())"
      },
      "onCreated": {
        "!doc": "Fired when a bookmark or folder is created.",
        "!type": "fn(id: string, bookmark: +bookmarks.BookmarkTreeNode)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/onCreated"
      },
      "onRemoved": {
        "!doc": "Fired when a bookmark or folder is removed.  When a folder is removed recursively, a single notification is fired for the folder, and none for its contents.",
        "!type": "fn(id: string, removeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/onRemoved"
      },
      "onChanged": {
        "!doc": "Fired when a bookmark or folder changes.  <b>Note:</b> Currently, only title and url changes trigger this.",
        "!type": "fn(id: string, changeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/onChanged"
      },
      "onMoved": {
        "!doc": "Fired when a bookmark or folder is moved to a different parent folder.",
        "!type": "fn(id: string, moveInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/onMoved"
      },
      "onChildrenReordered": {
        "!doc": "Fired when the children of a folder have changed their order due to the order being sorted in the UI.  This is not called as a result of a move().",
        "!type": "fn(id: string, reorderInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/onChildrenReordered"
      },
      "onImportBegan": {
        "!doc": "Fired when a bookmark import session is begun.  Expensive observers should ignore onCreated updates until onImportEnded is fired.  Observers should still handle other notifications immediately.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/onImportBegan"
      },
      "onImportEnded": {
        "!doc": "Fired when a bookmark import session is ended.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/bookmarks/onImportEnded"
      }
    },
    "browserAction": {
      "!doc": "Use browser actions to put icons in the main browser toolbar, to the right of the address bar. In addition to its icon, a browser action can also have a tooltip, a badge, and a popup.",
      "setTitle": {
        "!doc": "Sets the title of the browser action. This shows up in the tooltip.",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/setTitle"
      },
      "getTitle": {
        "!doc": "Gets the title of the browser action.",
        "!type": "fn(details: +browserAction.Details, callback: fn(result: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/getTitle"
      },
      "setIcon": {
        "!doc": "Sets the icon for the browser action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/setIcon"
      },
      "setPopup": {
        "!doc": "Sets the html document to be opened as a popup when the user clicks on the browser action's icon.",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/setPopup"
      },
      "getPopup": {
        "!doc": "Gets the html document set as the popup for this browser action.",
        "!type": "fn(details: +browserAction.Details, callback: fn(result: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/getPopup"
      },
      "setBadgeText": {
        "!doc": "Sets the badge text for the browser action. The badge is displayed on top of the icon.",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/setBadgeText"
      },
      "getBadgeText": {
        "!doc": "Gets the badge text of the browser action. If no tab nor window is specified is specified, the global badge text is returned.",
        "!type": "fn(details: +browserAction.Details, callback: fn(result: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/getBadgeText"
      },
      "setBadgeBackgroundColor": {
        "!doc": "Sets the background color for the badge.",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/setBadgeBackgroundColor"
      },
      "getBadgeBackgroundColor": {
        "!doc": "Gets the background color of the browser action badge.",
        "!type": "fn(details: +browserAction.Details, callback: fn(result: +browserAction.ColorArray))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/getBadgeBackgroundColor"
      },
      "setBadgeTextColor": {
        "!doc": "Sets the text color for the badge.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/setBadgeTextColor"
      },
      "getBadgeTextColor": {
        "!doc": "Gets the text color of the browser action badge.",
        "!type": "fn(details: +browserAction.Details)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/getBadgeTextColor"
      },
      "enable": {
        "!doc": "Enables the browser action for a tab. By default, browser actions are enabled.",
        "!type": "fn(tabId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/enable"
      },
      "disable": {
        "!doc": "Disables the browser action for a tab.",
        "!type": "fn(tabId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/disable"
      },
      "isEnabled": {
        "!doc": "Checks whether the browser action is enabled.",
        "!type": "fn(details: +browserAction.Details)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/isEnabled"
      },
      "openPopup": {
        "!doc": "Opens the extension popup window in the active window.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/openPopup"
      },
      "onClicked": {
        "!doc": "Fired when a browser action icon is clicked.  This event will not fire if the browser action has a popup.",
        "!type": "fn(tab: +tabs.Tab, info: +browserAction.OnClickData)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browserAction/onClicked"
      }
    },
    "browsingData": {
      "!doc": "Use the <code>chrome.browsingData</code> API to remove browsing data from a user's local profile.",
      "settings": {
        "!doc": "Reports which types of data are currently selected in the 'Clear browsing data' settings UI.  Note: some of the data types included in this API are not available in the settings UI, and some UI settings control more than one data type listed here.",
        "!type": "fn(callback: fn(result: object))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/settings"
      },
      "remove": {
        "!doc": "Clears various types of browsing data stored in a user's profile.",
        "!type": "fn(options: +browsingData.RemovalOptions, dataToRemove: +browsingData.DataTypeSet, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/remove"
      },
      "removeAppcache": {
        "!doc": "Clears websites' appcache data.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())"
      },
      "removeCache": {
        "!doc": "Clears the browser's cache.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removeCache"
      },
      "removeCookies": {
        "!doc": "Clears the browser's cookies and server-bound certificates modified within a particular timeframe.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removeCookies"
      },
      "removeDownloads": {
        "!doc": "Clears the browser's list of downloaded files (<em>not</em> the downloaded files themselves).",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removeDownloads"
      },
      "removeFileSystems": {
        "!doc": "Clears websites' file system data.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())"
      },
      "removeFormData": {
        "!doc": "Clears the browser's stored form data (autofill).",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removeFormData"
      },
      "removeHistory": {
        "!doc": "Clears the browser's history.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removeHistory"
      },
      "removeIndexedDB": {
        "!doc": "Clears websites' IndexedDB data.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())"
      },
      "removeLocalStorage": {
        "!doc": "Clears websites' local storage data.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removeLocalStorage"
      },
      "removePluginData": {
        "!doc": "Clears plugins' data.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removePluginData"
      },
      "removePasswords": {
        "!doc": "Clears the browser's stored passwords.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/browsingData/removePasswords"
      },
      "removeWebSQL": {
        "!doc": "Clears websites' WebSQL data.",
        "!type": "fn(options: +browsingData.RemovalOptions, callback: fn())"
      }
    },
    "captivePortal": {
      "!doc": "This API provides the ability detect the captive portal state of the users connection.",
      "getState": {
        "!doc": "Returns the current portal state, one of `unknown`, `not_captive`, `unlocked_portal`, `locked_portal`.",
        "!type": "fn()"
      },
      "getLastChecked": {
        "!doc": "Returns the time difference between NOW and the last time a request was completed in milliseconds.",
        "!type": "fn()"
      },
      "onStateChanged": {
        "!doc": "Fired when the captive portal state changes.",
        "!type": "fn(details: object)"
      },
      "onConnectivityAvailable": {
        "!doc": "This notification will be emitted when the captive portal service has determined that we can connect to the internet. The service will pass either `captive` if there is an unlocked captive portal present, or `clear` if no captive portal was detected.",
        "!type": "fn(status: string)"
      }
    },
    "commands": {
      "!doc": "Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the xtension.",
      "update": {
        "!doc": "Update the details of an already defined command.",
        "!type": "fn(detail: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/commands/update"
      },
      "reset": {
        "!doc": "Reset a command's details to what is specified in the manifest.",
        "!type": "fn(name: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/commands/reset"
      },
      "getAll": {
        "!doc": "Returns all the registered extension commands for this extension and their shortcut (if active).",
        "!type": "fn(callback: fn(commands: [+commands.Command]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/commands/getAll"
      },
      "onCommand": {
        "!doc": "Fired when a registered command is activated using a keyboard shortcut.",
        "!type": "fn(command: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/commands/onCommand"
      }
    },
    "devtools": {
      "inspectedWindow": {
        "!doc": "Use the <code>chrome.devtools.inspectedWindow</code> API to interact with the inspected window: obtain the tab ID for the inspected page, evaluate the code in the context of the inspected window, reload the page, or obtain the list of resources within the page.",
        "eval": {
          "!doc": "Evaluates a JavaScript expression in the context of the main frame of the inspected page. The expression must evaluate to a JSON-compliant object, otherwise an exception is thrown. The eval function can report either a DevTools-side error or a JavaScript exception that occurs during evaluation. In either case, the <code>result</code> parameter of the callback is <code>undefined</code>. In the case of a DevTools-side error, the <code>isException</code> parameter is non-null and has <code>isError</code> set to true and <code>code</code> set to an error code. In the case of a JavaScript error, <code>isException</code> is set to true and <code>value</code> is set to the string value of thrown object.",
          "!type": "fn(expression: string, options: object, callback: fn(result: ?, exceptionInfo: object))",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.inspectedWindow/eval"
        },
        "reload": {
          "!doc": "Reloads the inspected page.",
          "!type": "fn(reloadOptions: object)",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.inspectedWindow/reload"
        },
        "getResources": {
          "!doc": "Retrieves the list of resources from the inspected page.",
          "!type": "fn(callback: fn(resources: [+devtools.inspectedWindow.Resource]))"
        },
        "onResourceAdded": {
          "!doc": "Fired when a new resource is added to the inspected page.",
          "!type": "fn(resource: +devtools.inspectedWindow.Resource)"
        },
        "onResourceContentCommitted": {
          "!doc": "Fired when a new revision of the resource is committed (e.g. user saves an edited version of the resource in the Developer Tools).",
          "!type": "fn(resource: +devtools.inspectedWindow.Resource, content: string)"
        },
        "tabId": {
          "!doc": "The ID of the tab being inspected. This ID may be used with chrome.tabs.* API.",
          "!type": "number",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.inspectedWindow/tabId"
        }
      },
      "network": {
        "!doc": "Use the <code>chrome.devtools.network</code> API to retrieve the information about network requests displayed by the Developer Tools in the Network panel.",
        "getHAR": {
          "!doc": "Returns HAR log that contains all known network requests.",
          "!type": "fn(callback: fn(harLog: object))",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.network/getHAR"
        },
        "onRequestFinished": {
          "!doc": "Fired when a network request is finished and all request data are available.",
          "!type": "fn(request: +devtools.network.Request)",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.network/onRequestFinished"
        },
        "onNavigated": {
          "!doc": "Fired when the inspected window navigates to a new page.",
          "!type": "fn(url: string)",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.network/onNavigated"
        }
      },
      "panels": {
        "!doc": "Use the <code>chrome.devtools.panels</code> API to integrate your extension into Developer Tools window UI: create your own panels, access existing panels, and add sidebars.",
        "create": {
          "!doc": "Creates an extension panel.",
          "!type": "fn(title: string, iconPath?: string, iconPath?: +manifest.ExtensionURL, pagePath: +manifest.ExtensionURL, callback: fn(panel: +devtools.panels.ExtensionPanel))",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.panels/create"
        },
        "setOpenResourceHandler": {
          "!doc": "Specifies the function to be called when the user clicks a resource link in the Developer Tools window. To unset the handler, either call the method with no parameters or pass null as the parameter.",
          "!type": "fn(callback: fn(resource: +devtools.inspectedWindow.Resource))"
        },
        "openResource": {
          "!doc": "Requests DevTools to open a URL in a Developer Tools panel.",
          "!type": "fn(url: string, lineNumber: number, callback: fn())"
        },
        "onThemeChanged": {
          "!doc": "Fired when the devtools theme changes.",
          "!type": "fn(themeName: string)",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.panels/onThemeChanged"
        },
        "elements": {
          "!doc": "Elements panel.",
          "!type": "+devtools.panels.ElementsPanel",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.panels/elements"
        },
        "sources": {
          "!doc": "Sources panel.",
          "!type": "+devtools.panels.SourcesPanel"
        },
        "themeName": {
          "!doc": "The name of the current devtools theme.",
          "!type": "string",
          "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/devtools.panels/themeName"
        }
      }
    },
    "find": {
      "!doc": "Use the <code>browser.find</code> API to interact with the browser's <code>Find</code> interface.",
      "find": {
        "!doc": "Search for text in document and store found ranges in array, in document order.",
        "!type": "fn(queryphrase: string, params: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/find/find"
      },
      "highlightResults": {
        "!doc": "Highlight a range",
        "!type": "fn(params: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/find/highlightResults"
      },
      "removeHighlighting": {
        "!doc": "Remove all highlighting from previous searches.",
        "!type": "fn(tabId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/find/removeHighlighting"
      }
    },
    "history": {
      "!doc": "Use the <code>browser.history</code> API to interact with the browser's record of visited pages. You can add, remove, and query for URLs in the browser's history. To override the history page with your own version, see $(topic:override)[Override Pages].",
      "search": {
        "!doc": "Searches the history for the last visit time of each page matching the query.",
        "!type": "fn(query: object, callback: fn(results: [+history.HistoryItem]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/search"
      },
      "getVisits": {
        "!doc": "Retrieves information about visits to a URL.",
        "!type": "fn(details: object, callback: fn(results: [+history.VisitItem]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/getVisits"
      },
      "addUrl": {
        "!doc": "Adds a URL to the history with a default visitTime of the current time and a default $(topic:transition-types)[transition type] of \"link\".",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/addUrl"
      },
      "deleteUrl": {
        "!doc": "Removes all occurrences of the given URL from the history.",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/deleteUrl"
      },
      "deleteRange": {
        "!doc": "Removes all items within the specified date range from the history.  Pages will not be removed from the history unless all visits fall within the range.",
        "!type": "fn(range: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/deleteRange"
      },
      "deleteAll": {
        "!doc": "Deletes all items from the history.",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/deleteAll"
      },
      "onVisited": {
        "!doc": "Fired when a URL is visited, providing the HistoryItem data for that URL.  This event fires before the page has loaded.",
        "!type": "fn(result: +history.HistoryItem)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/onVisited"
      },
      "onVisitRemoved": {
        "!doc": "Fired when one or more URLs are removed from the history service.  When all visits have been removed the URL is purged from history.",
        "!type": "fn(removed: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/onVisitRemoved"
      },
      "onTitleChanged": {
        "!doc": "Fired when the title of a URL is changed in the browser history.",
        "!type": "fn(changed: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/history/onTitleChanged"
      }
    },
    "identity": {
      "!doc": "Use the chrome.identity API to get OAuth2 access tokens. ",
      "getAccounts": {
        "!doc": "Retrieves a list of AccountInfo objects describing the accounts present on the profile.",
        "!type": "fn(callback: fn(results: [+identity.AccountInfo]))"
      },
      "getAuthToken": {
        "!doc": "Gets an OAuth2 access token using the client ID and scopes specified in the oauth2 section of manifest.json.",
        "!type": "fn(details: object, callback: fn(results: [+identity.AccountInfo]))"
      },
      "getProfileUserInfo": {
        "!doc": "Retrieves email address and obfuscated gaia id of the user signed into a profile.",
        "!type": "fn(callback: fn(userinfo: object))"
      },
      "removeCachedAuthToken": {
        "!doc": "Removes an OAuth2 access token from the Identity API's token cache.",
        "!type": "fn(details: object, callback: fn(userinfo: object))"
      },
      "launchWebAuthFlow": {
        "!doc": "Starts an auth flow at the specified URL.",
        "!type": "fn(details: object, callback: fn(responseUrl: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/identity/launchWebAuthFlow"
      },
      "getRedirectURL": {
        "!doc": "Generates a redirect URL to be used in |launchWebAuthFlow|.",
        "!type": "fn(path: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/identity/getRedirectURL"
      },
      "onSignInChanged": {
        "!doc": "Fired when signin state changes for an account on the user's profile.",
        "!type": "fn(account: +identity.AccountInfo, signedIn: bool)"
      }
    },
    "menus": {
      "!doc": "Use the browser.menus API to add items to the browser's menus. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages.",
      "getTargetElement": {
        "!doc": "Retrieve the element that was associated with a recent contextmenu event.",
        "!type": "fn(targetElementId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/getTargetElement"
      },
      "create": {
        "!doc": "Creates a new context menu item. Note that if an error occurs during creation, you may not find out until the creation callback fires (the details will be in $(ref:runtime.lastError)).",
        "!type": "fn(createProperties: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/create"
      },
      "update": {
        "!doc": "Updates a previously created context menu item.",
        "!type": "fn(id?: number, id?: string, updateProperties: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/update"
      },
      "remove": {
        "!doc": "Removes a context menu item.",
        "!type": "fn(menuItemId?: number, menuItemId?: string, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/remove"
      },
      "removeAll": {
        "!doc": "Removes all context menu items added by this extension.",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/removeAll"
      },
      "overrideContext": {
        "!doc": "Show the matching menu items from this extension instead of the default menu. This should be called during a 'contextmenu' DOM event handler, and only applies to the menu that opens after this event.",
        "!type": "fn(contextOptions: object)"
      },
      "refresh": {
        "!doc": "Updates the extension items in the shown menu, including changes that have been made since the menu was shown. Has no effect if the menu is hidden. Rebuilding a shown menu is an expensive operation, only invoke this method when necessary.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/refresh"
      },
      "onClicked": {
        "!doc": "Fired when a context menu item is clicked.",
        "!type": "fn(info: +menus.OnClickData, tab: +tabs.Tab)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/onClicked"
      },
      "onShown": {
        "!doc": "Fired when a menu is shown. The extension can add, modify or remove menu items and call menus.refresh() to update the menu.",
        "!type": "fn(info: object, tab: +tabs.Tab)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/onShown"
      },
      "onHidden": {
        "!doc": "Fired when a menu is hidden. This event is only fired if onShown has fired before.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/onHidden"
      },
      "ACTION_MENU_TOP_LEVEL_LIMIT": {
        "!doc": "The maximum number of top level extension items that can be added to an extension action context menu. Any items beyond this limit will be ignored.",
        "!type": "number",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/menus/ACTION_MENU_TOP_LEVEL_LIMIT"
      }
    },
    "contextMenus": {
      "!doc": "Use the browser.contextMenus API to add items to the browser's context menu. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages."
    },
    "normandyAddonStudy": {
      "!doc": "Normandy Study API",
      "getStudy": {
        "!doc": "Returns a study object for the current study.",
        "!type": "fn()"
      },
      "endStudy": {
        "!doc": "Marks the study as ended and then uninstalls the addon.",
        "!type": "fn(reason: string)"
      },
      "getClientMetadata": {
        "!doc": "Returns an object with metadata about the client which may be required for constructing survey URLs.",
        "!type": "fn()"
      },
      "onUnenroll": {
        "!doc": "Fired when a user unenrolls from a study but before the addon is uninstalled.",
        "!type": "fn(reason: string)"
      }
    },
    "omnibox": {
      "!doc": "The omnibox API allows you to register a keyword with Firefox's address bar.",
      "setDefaultSuggestion": {
        "!doc": "Sets the description and styling for the default suggestion. The default suggestion is the text that is displayed in the first suggestion row underneath the URL bar.",
        "!type": "fn(suggestion: +omnibox.DefaultSuggestResult)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/omnibox/setDefaultSuggestion"
      },
      "onInputStarted": {
        "!doc": "User has started a keyword input session by typing the extension's keyword. This is guaranteed to be sent exactly once per input session, and before any onInputChanged events.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/omnibox/onInputStarted"
      },
      "onInputChanged": {
        "!doc": "User has changed what is typed into the omnibox.",
        "!type": "fn(text: string, suggest: fn(suggestResults: [+omnibox.SuggestResult]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/omnibox/onInputChanged"
      },
      "onInputEntered": {
        "!doc": "User has accepted what is typed into the omnibox.",
        "!type": "fn(text: string, disposition: +omnibox.OnInputEnteredDisposition)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/omnibox/onInputEntered"
      },
      "onInputCancelled": {
        "!doc": "User has ended the keyword input session without accepting the input.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/omnibox/onInputCancelled"
      }
    },
    "pageAction": {
      "!doc": "Use the <code>browser.pageAction</code> API to put icons inside the address bar. Page actions represent actions that can be taken on the current page, but that aren't applicable to all pages.",
      "show": {
        "!doc": "Shows the page action. The page action is shown whenever the tab is selected.",
        "!type": "fn(tabId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/show"
      },
      "hide": {
        "!doc": "Hides the page action.",
        "!type": "fn(tabId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/hide"
      },
      "isShown": {
        "!doc": "Checks whether the page action is shown.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/isShown"
      },
      "setTitle": {
        "!doc": "Sets the title of the page action. This is displayed in a tooltip over the page action.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/setTitle"
      },
      "getTitle": {
        "!doc": "Gets the title of the page action.",
        "!type": "fn(details: object, callback: fn(result: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/getTitle"
      },
      "setIcon": {
        "!doc": "Sets the icon for the page action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
        "!type": "fn(details: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/setIcon"
      },
      "setPopup": {
        "!doc": "Sets the html document to be opened as a popup when the user clicks on the page action's icon.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/setPopup"
      },
      "getPopup": {
        "!doc": "Gets the html document set as the popup for this page action.",
        "!type": "fn(details: object, callback: fn(result: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/getPopup"
      },
      "openPopup": {
        "!doc": "Opens the extension page action in the active window.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/openPopup"
      },
      "onClicked": {
        "!doc": "Fired when a page action icon is clicked.  This event will not fire if the page action has a popup.",
        "!type": "fn(tab: +tabs.Tab, info: +pageAction.OnClickData)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pageAction/onClicked"
      }
    },
    "pkcs11": {
      "!doc": "PKCS#11 module management API",
      "isModuleInstalled": {
        "!doc": "checks whether a PKCS#11 module, given by name, is installed",
        "!type": "fn(name: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pkcs11/isModuleInstalled"
      },
      "installModule": {
        "!doc": "Install a PKCS#11 module with a given name",
        "!type": "fn(name: string, flags: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pkcs11/installModule"
      },
      "uninstallModule": {
        "!doc": "Remove an installed PKCS#11 module from firefox",
        "!type": "fn(name: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pkcs11/uninstallModule"
      },
      "getModuleSlots": {
        "!doc": "Enumerate a module's slots, each with their name and whether a token is present",
        "!type": "fn(name: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/pkcs11/getModuleSlots"
      }
    },
    "geckoProfiler": {
      "!doc": "Exposes the browser's profiler.",
      "start": {
        "!doc": "Starts the profiler with the specified settings.",
        "!type": "fn(settings: object)"
      },
      "stop": {
        "!doc": "Stops the profiler and discards any captured profile data.",
        "!type": "fn()"
      },
      "pause": {
        "!doc": "Pauses the profiler, keeping any profile data that is already written.",
        "!type": "fn()"
      },
      "resume": {
        "!doc": "Resumes the profiler with the settings that were initially used to start it.",
        "!type": "fn()"
      },
      "dumpProfileToFile": {
        "!doc": "Gathers the profile data from the current profiling session, and writes it to disk. The returned promise resolves to a path that locates the created file.",
        "!type": "fn(fileName: string)"
      },
      "getProfile": {
        "!doc": "Gathers the profile data from the current profiling session.",
        "!type": "fn()"
      },
      "getProfileAsArrayBuffer": {
        "!doc": "Gathers the profile data from the current profiling session. The returned promise resolves to an array buffer that contains a JSON string.",
        "!type": "fn()"
      },
      "getProfileAsGzippedArrayBuffer": {
        "!doc": "Gathers the profile data from the current profiling session. The returned promise resolves to an array buffer that contains a gzipped JSON string.",
        "!type": "fn()"
      },
      "getSymbols": {
        "!doc": "Gets the debug symbols for a particular library.",
        "!type": "fn(debugName: string, breakpadId: string)"
      },
      "onRunning": {
        "!doc": "Fires when the profiler starts/stops running.",
        "!type": "fn(isRunning: bool)"
      }
    },
    "search": {
      "!doc": "Use browser.search to interact with search engines.",
      "get": {
        "!doc": "Gets a list of search engines.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/search/get"
      },
      "search": {
        "!doc": "Perform a search.",
        "!type": "fn(searchProperties: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/search/search"
      }
    },
    "sessions": {
      "!doc": "Use the <code>chrome.sessions</code> API to query and restore tabs and windows from a browsing session.",
      "forgetClosedTab": {
        "!doc": "Forget a recently closed tab.",
        "!type": "fn(windowId: number, sessionId: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/forgetClosedTab"
      },
      "forgetClosedWindow": {
        "!doc": "Forget a recently closed window.",
        "!type": "fn(sessionId: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/forgetClosedWindow"
      },
      "getRecentlyClosed": {
        "!doc": "Gets the list of recently closed tabs and/or windows.",
        "!type": "fn(filter: +sessions.Filter, callback: fn(sessions: [+sessions.Session]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/getRecentlyClosed"
      },
      "getDevices": {
        "!doc": "Retrieves all devices with synced sessions.",
        "!type": "fn(filter: +sessions.Filter, callback: fn(devices: [+sessions.Device]))"
      },
      "restore": {
        "!doc": "Reopens a $(ref:windows.Window) or $(ref:tabs.Tab), with an optional callback to run when the entry has been restored.",
        "!type": "fn(sessionId: string, callback: fn(restoredSession: +sessions.Session))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/restore"
      },
      "setTabValue": {
        "!doc": "Set a key/value pair on a given tab.",
        "!type": "fn(tabId: number, key: string, value: ?)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/setTabValue"
      },
      "getTabValue": {
        "!doc": "Retrieve a value that was set for a given key on a given tab.",
        "!type": "fn(tabId: number, key: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/getTabValue"
      },
      "removeTabValue": {
        "!doc": "Remove a key/value pair that was set on a given tab.",
        "!type": "fn(tabId: number, key: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/removeTabValue"
      },
      "setWindowValue": {
        "!doc": "Set a key/value pair on a given window.",
        "!type": "fn(windowId: number, key: string, value: ?)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/setWindowValue"
      },
      "getWindowValue": {
        "!doc": "Retrieve a value that was set for a given key on a given window.",
        "!type": "fn(windowId: number, key: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/getWindowValue"
      },
      "removeWindowValue": {
        "!doc": "Remove a key/value pair that was set on a given window.",
        "!type": "fn(windowId: number, key: string)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/removeWindowValue"
      },
      "onChanged": {
        "!doc": "Fired when recently closed tabs and/or windows are changed. This event does not monitor synced sessions changes.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/onChanged"
      },
      "MAX_SESSION_RESULTS": {
        "!doc": "The maximum number of $(ref:sessions.Session) that will be included in a requested list.",
        "!type": "number",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sessions/MAX_SESSION_RESULTS"
      }
    },
    "sidebarAction": {
      "!doc": "Use sidebar actions to add a sidebar to Firefox.",
      "setTitle": {
        "!doc": "Sets the title of the sidebar action. This shows up in the tooltip.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/setTitle"
      },
      "getTitle": {
        "!doc": "Gets the title of the sidebar action.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/getTitle"
      },
      "setIcon": {
        "!doc": "Sets the icon for the sidebar action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <strong>path</strong> or the <strong>imageData</strong> property must be specified.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/setIcon"
      },
      "setPanel": {
        "!doc": "Sets the url to the html document to be opened in the sidebar when the user clicks on the sidebar action's icon.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/setPanel"
      },
      "getPanel": {
        "!doc": "Gets the url to the html document set as the panel for this sidebar action.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/getPanel"
      },
      "open": {
        "!doc": "Opens the extension sidebar in the active window.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/open"
      },
      "close": {
        "!doc": "Closes the extension sidebar in the active window if the sidebar belongs to the extension.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/close"
      },
      "isOpen": {
        "!doc": "Checks whether the sidebar action is open.",
        "!type": "fn(details: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/sidebarAction/isOpen"
      }
    },
    "tabs": {
      "!doc": "Use the <code>browser.tabs</code> API to interact with the browser's tab system. You can use this API to create, modify, and rearrange tabs in the browser.",
      "get": {
        "!doc": "Retrieves details about the specified tab.",
        "!type": "fn(tabId: number, callback: fn(tab: +tabs.Tab))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/get"
      },
      "getCurrent": {
        "!doc": "Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example: a background page or popup view).",
        "!type": "fn(callback: fn(tab: +tabs.Tab))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/getCurrent"
      },
      "connect": {
        "!doc": "Connects to the content script(s) in the specified tab. The $(ref:runtime.onConnect) event is fired in each content script running in the specified tab for the current extension. For more details, see $(topic:messaging)[Content Script Messaging].",
        "!type": "fn(tabId: number, connectInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/connect"
      },
      "sendRequest": {
        "!doc": "Sends a single request to the content script(s) in the specified tab, with an optional callback to run when a response is sent back.  The $(ref:extension.onRequest) event is fired in each content script running in the specified tab for the current extension.",
        "!type": "fn(tabId: number, request: ?, responseCallback: fn(response: ?))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/sendRequest"
      },
      "sendMessage": {
        "!doc": "Sends a single message to the content script(s) in the specified tab, with an optional callback to run when a response is sent back.  The $(ref:runtime.onMessage) event is fired in each content script running in the specified tab for the current extension.",
        "!type": "fn(tabId: number, message: ?, options: object, responseCallback: fn(response: ?))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/sendMessage"
      },
      "getSelected": {
        "!doc": "Gets the tab that is selected in the specified window.",
        "!type": "fn(windowId: number, callback: fn(tab: +tabs.Tab))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/getSelected"
      },
      "getAllInWindow": {
        "!doc": "Gets details about all tabs in the specified window.",
        "!type": "fn(windowId: number, callback: fn(tabs: [+tabs.Tab]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/getAllInWindow"
      },
      "create": {
        "!doc": "Creates a new tab.",
        "!type": "fn(createProperties: object, callback: fn(tab: +tabs.Tab))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/create"
      },
      "duplicate": {
        "!doc": "Duplicates a tab.",
        "!type": "fn(tabId: number, callback: fn(tab: +tabs.Tab))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/duplicate"
      },
      "query": {
        "!doc": "Gets all tabs that have the specified properties, or all tabs if no properties are specified.",
        "!type": "fn(queryInfo: object, callback: fn(result: [+tabs.Tab]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/query"
      },
      "highlight": {
        "!doc": "Highlights the given tabs.",
        "!type": "fn(highlightInfo: object, callback: fn(window: +windows.Window))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/highlight"
      },
      "update": {
        "!doc": "Modifies the properties of a tab. Properties that are not specified in <var>updateProperties</var> are not modified.",
        "!type": "fn(tabId: number, updateProperties: object, callback: fn(tab: +tabs.Tab))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/update"
      },
      "move": {
        "!doc": "Moves one or more tabs to a new position within its window, or to a new window. Note that tabs can only be moved to and from normal (window.type === \"normal\") windows.",
        "!type": "fn(tabIds?: number, tabIds?: [number], moveProperties: object, callback: fn(tabs?: +tabs.Tab, tabs?: [+tabs.Tab]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/move"
      },
      "reload": {
        "!doc": "Reload a tab.",
        "!type": "fn(tabId: number, reloadProperties: object, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/reload"
      },
      "remove": {
        "!doc": "Closes one or more tabs.",
        "!type": "fn(tabIds?: number, tabIds?: [number], callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/remove"
      },
      "discard": {
        "!doc": "discards one or more tabs.",
        "!type": "fn(tabIds?: number, tabIds?: [number])",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/discard"
      },
      "detectLanguage": {
        "!doc": "Detects the primary language of the content in a tab.",
        "!type": "fn(tabId: number, callback: fn(language: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/detectLanguage"
      },
      "toggleReaderMode": {
        "!doc": "Toggles reader mode for the document in the tab.",
        "!type": "fn(tabId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/toggleReaderMode"
      },
      "captureTab": {
        "!doc": "Captures the visible area of a specified tab. You must have $(topic:declare_permissions)[&lt;all_urls&gt;] permission to use this method.",
        "!type": "fn(tabId: number, options: +extensionTypes.ImageDetails)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/captureTab"
      },
      "captureVisibleTab": {
        "!doc": "Captures the visible area of the currently active tab in the specified window. You must have $(topic:declare_permissions)[&lt;all_urls&gt;] permission to use this method.",
        "!type": "fn(windowId: number, options: +extensionTypes.ImageDetails, callback: fn(dataUrl: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/captureVisibleTab"
      },
      "executeScript": {
        "!doc": "Injects JavaScript code into a page. For details, see the $(topic:content_scripts)[programmatic injection] section of the content scripts doc.",
        "!type": "fn(tabId: number, details: +extensionTypes.InjectDetails, callback: fn(result: [?]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/executeScript"
      },
      "insertCSS": {
        "!doc": "Injects CSS into a page. For details, see the $(topic:content_scripts)[programmatic injection] section of the content scripts doc.",
        "!type": "fn(tabId: number, details: +extensionTypes.InjectDetails, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/insertCSS"
      },
      "removeCSS": {
        "!doc": "Removes injected CSS from a page. For details, see the $(topic:content_scripts)[programmatic injection] section of the content scripts doc.",
        "!type": "fn(tabId: number, details: +extensionTypes.InjectDetails, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/removeCSS"
      },
      "setZoom": {
        "!doc": "Zooms a specified tab.",
        "!type": "fn(tabId: number, zoomFactor: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/setZoom"
      },
      "getZoom": {
        "!doc": "Gets the current zoom factor of a specified tab.",
        "!type": "fn(tabId: number, callback: fn(zoomFactor: number))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/getZoom"
      },
      "setZoomSettings": {
        "!doc": "Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab.",
        "!type": "fn(tabId: number, zoomSettings: +tabs.ZoomSettings, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/setZoomSettings"
      },
      "getZoomSettings": {
        "!doc": "Gets the current zoom settings of a specified tab.",
        "!type": "fn(tabId: number, callback: fn(zoomSettings: +tabs.ZoomSettings))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/getZoomSettings"
      },
      "print": {
        "!doc": "Prints page in active tab.",
        "!type": "fn()",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/print"
      },
      "printPreview": {
        "!doc": "Shows print preview for page in active tab.",
        "!type": "fn(callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/printPreview"
      },
      "saveAsPDF": {
        "!doc": "Saves page in active tab as a PDF file.",
        "!type": "fn(pageSettings: +tabs.PageSettings, callback: fn(status: string))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/saveAsPDF"
      },
      "show": {
        "!doc": "Shows one or more tabs.",
        "!type": "fn(tabIds?: number, tabIds?: [number])",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/show"
      },
      "hide": {
        "!doc": "Hides one or more tabs. The <code>\"tabHide\"</code> permission is required to hide tabs.  Not all tabs are hidable.  Returns an array of hidden tabs.",
        "!type": "fn(tabIds?: number, tabIds?: [number])",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/hide"
      },
      "moveInSuccession": {
        "!doc": "Removes an array of tabs from their lines of succession and prepends or appends them in a chain to another tab.",
        "!type": "fn(tabIds: [number], tabId: number, options: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/moveInSuccession"
      },
      "onCreated": {
        "!doc": "Fired when a tab is created. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.",
        "!type": "fn(tab: +tabs.Tab)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onCreated"
      },
      "onUpdated": {
        "!doc": "Fired when a tab is updated.",
        "!type": "fn(tabId: number, changeInfo: object, tab: +tabs.Tab)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onUpdated"
      },
      "onMoved": {
        "!doc": "Fired when a tab is moved within a window. Only one move event is fired, representing the tab the user directly moved. Move events are not fired for the other tabs that must move in response. This event is not fired when a tab is moved between windows. For that, see $(ref:tabs.onDetached).",
        "!type": "fn(tabId: number, moveInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onMoved"
      },
      "onSelectionChanged": {
        "!doc": "Fires when the selected tab in a window changes.",
        "!type": "fn(tabId: number, selectInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onSelectionChanged"
      },
      "onActiveChanged": {
        "!doc": "Fires when the selected tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to $(ref:tabs.onUpdated) events to be notified when a URL is set.",
        "!type": "fn(tabId: number, selectInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onActiveChanged"
      },
      "onActivated": {
        "!doc": "Fires when the active tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.",
        "!type": "fn(activeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onActivated"
      },
      "onHighlightChanged": {
        "!doc": "Fired when the highlighted or selected tabs in a window changes.",
        "!type": "fn(selectInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onHighlightChanged"
      },
      "onHighlighted": {
        "!doc": "Fired when the highlighted or selected tabs in a window changes.",
        "!type": "fn(highlightInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onHighlighted"
      },
      "onDetached": {
        "!doc": "Fired when a tab is detached from a window, for example because it is being moved between windows.",
        "!type": "fn(tabId: number, detachInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onDetached"
      },
      "onAttached": {
        "!doc": "Fired when a tab is attached to a window, for example because it was moved between windows.",
        "!type": "fn(tabId: number, attachInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onAttached"
      },
      "onRemoved": {
        "!doc": "Fired when a tab is closed.",
        "!type": "fn(tabId: number, removeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onRemoved"
      },
      "onReplaced": {
        "!doc": "Fired when a tab is replaced with another tab due to prerendering or instant.",
        "!type": "fn(addedTabId: number, removedTabId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onReplaced"
      },
      "onZoomChange": {
        "!doc": "Fired when a tab is zoomed.",
        "!type": "fn(ZoomChangeInfo: object)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/onZoomChange"
      },
      "TAB_ID_NONE": {
        "!doc": "An ID which represents the absence of a browser tab.",
        "!type": "number",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/tabs/TAB_ID_NONE"
      }
    },
    "topSites": {
      "!doc": "Use the chrome.topSites API to access the top sites that are displayed on the new tab page. ",
      "get": {
        "!doc": "Gets a list of top sites.",
        "!type": "fn(options: object, callback: fn(results: [+topSites.MostVisitedURL]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/topSites/get"
      }
    },
    "urlbar": {
      "!doc": "Use the <code>browser.urlbar</code> API to experiment with new features in the URLBar. Restricted to Mozilla privileged WebExtensions.",
      "onBehaviorRequested": {
        "!doc": "Before a query starts, this event is fired for the given provider. Its purpose is to request the provider's behavior for the query. The listener should return a behavior in response. By default, providers are inactive, so if your provider should always be inactive, you don't need to listen for this event.",
        "!type": "fn(query: +urlbar.Query)"
      },
      "onQueryCanceled": {
        "!doc": "This event is fired for the given provider when a query is canceled. The listener should stop any ongoing fetch or creation of results and clean up its resources.",
        "!type": "fn(query: +urlbar.Query)"
      },
      "onResultsRequested": {
        "!doc": "When a query starts, this event is fired for the given provider if the provider is active for the query and there are no other providers that are restricting. Its purpose is to request the provider's results for the query. The listener should return a list of results in response.",
        "!type": "fn(query: +urlbar.Query)"
      },
      "onResultPicked": {
        "!doc": "Typically, a provider includes a <code>url</code> property in its results' payloads. When the user picks a result with a URL, Firefox automatically loads the URL. URLs don't make sense for every result type, however. When the user picks a result without a URL, this event is fired. The provider should take an appropriate action in response. Currently the only applicable <code>ResultType</code> is <code>tip</code>.",
        "!type": "fn(payload: object)"
      },
      "openViewOnFocus": {
        "!doc": "Enables or disables the open-view-on-focus mode.",
        "!type": "+types.Setting"
      },
      "engagementTelemetry": {
        "!doc": "Enables or disables the engagement telemetry.",
        "!type": "+types.Setting"
      },
      "contextualTip": {
        "!doc": "A contextual tip appears in the urlbar's view (its search results panel) and has an icon, text, optional button, and an optional link. Use the <code>browser.urlbar.contextualTip</code> API to experiment with the contextual tip. Restricted to Mozilla privileged WebExtensions.",
        "set": {
          "!doc": "Sets the contextual tip in the most recent browser winodw with the given icon, title, button title, and link title. If the urlbar's view is not already open, then it will be opened so the contextual tip will be visible. Note that when the urlbar's view is closed, the contextual tip is hidden and will not appear again. `browser.urlbar.contextualTip.set` must be called each time a contextual tip should appear.",
          "!type": "fn(details: +urlbar.contextualTip.ContextualTip)"
        },
        "remove": {
          "!doc": "Hides the contextual tip (it will still be in the DOM).",
          "!type": "fn()"
        },
        "onButtonClicked": {
          "!doc": "Fired when the user clicks the contextual tip's button.",
          "!type": "fn(windowId: number)"
        },
        "onLinkClicked": {
          "!doc": "Fired when the user clicks the contextual tip's link.",
          "!type": "fn(windowId: number)"
        }
      }
    },
    "windows": {
      "!doc": "Use the <code>browser.windows</code> API to interact with browser windows. You can use this API to create, modify, and rearrange windows in the browser.",
      "get": {
        "!doc": "Gets details about a window.",
        "!type": "fn(windowId: number, getInfo: +windows.GetInfo, callback: fn(window: +windows.Window))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/get"
      },
      "getCurrent": {
        "!doc": "Gets the $(topic:current-window)[current window].",
        "!type": "fn(getInfo: +windows.GetInfo, callback: fn(window: +windows.Window))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/getCurrent"
      },
      "getLastFocused": {
        "!doc": "Gets the window that was most recently focused &mdash; typically the window 'on top'.",
        "!type": "fn(getInfo: +windows.GetInfo, callback: fn(window: +windows.Window))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/getLastFocused"
      },
      "getAll": {
        "!doc": "Gets all windows.",
        "!type": "fn(getInfo: object, callback: fn(windows: [+windows.Window]))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/getAll"
      },
      "create": {
        "!doc": "Creates (opens) a new browser with any optional sizing, position or default URL provided.",
        "!type": "fn(createData: object, callback: fn(window: +windows.Window))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/create"
      },
      "update": {
        "!doc": "Updates the properties of a window. Specify only the properties that you want to change; unspecified properties will be left unchanged.",
        "!type": "fn(windowId: number, updateInfo: object, callback: fn(window: +windows.Window))",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/update"
      },
      "remove": {
        "!doc": "Removes (closes) a window, and all the tabs inside it.",
        "!type": "fn(windowId: number, callback: fn())",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/remove"
      },
      "onCreated": {
        "!doc": "Fired when a window is created.",
        "!type": "fn(window: +windows.Window)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/onCreated"
      },
      "onRemoved": {
        "!doc": "Fired when a window is removed (closed).",
        "!type": "fn(windowId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/onRemoved"
      },
      "onFocusChanged": {
        "!doc": "Fired when the currently focused window changes. Will be $(ref:windows.WINDOW_ID_NONE) if all browser windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE will always be sent immediately preceding a switch from one browser window to another.",
        "!type": "fn(windowId: number)",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/onFocusChanged"
      },
      "WINDOW_ID_NONE": {
        "!doc": "The windowId value that represents the absence of a browser window.",
        "!type": "number",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/WINDOW_ID_NONE"
      },
      "WINDOW_ID_CURRENT": {
        "!doc": "The windowId value that represents the $(topic:current-window)[current window].",
        "!type": "number",
        "!url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/windows/WINDOW_ID_CURRENT"
      }
    }
  }
}